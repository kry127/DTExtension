syntax = "proto3";

package yandexcloud.datatransfer.dtextension.v0_2;

message Result {
    bool ok = 1;
    string error = 2;
}

message Namespace {
    string namespace = 1;
}

message Table {
    Namespace namespace = 1;
    string name = 2;
    Schema schema = 3;
}

message Schema {
    repeated Column columns = 1;
}

message Column {
    string name = 1;
    string type = 2;
    bool key = 3;
}


message ChangeItem {
    bytes binary = 1;
}

message ColumnData {
    oneof data {
        int32 int32 = 1;
        int64 int64 = 2;
        uint32 uint32 = 3;
        uint64 uint64 = 4;

        string string = 10;
        bytes binary = 11;
    }
}

// this message represents an interval in form (from; to]
// there are some reasons to make it like this:
// 1. First of all, people are frequently thinking in the terms of increasing values,
//    although, you can technically store here from > to for decreasing values
// 1. The second, we can remember the last commited change item, so it can be
//    held in 'from' field, thus it should be excluded during extraction
// 2. In the beginning of snapshot we don't know where to start, so we can leave 'from'
//    field empty. Column 'max' can be found as 'SELECT MAX(col) FROM ...' and guaranties
//    that during snapshot of add-only table we didn't overlap with further replication
// 3. Splitting by the middle is eazy: given m as middle:
//    (from; to] -> (from; m] U (m; to]
message DataRange {
    // absence of 'from' field means -oo
    ColumnData from_exclusive = 1;
    // absence of 'to' field means +oo
    ColumnData to_inclusive = 2;
}

message ColumnCursor {
    Column column = 1;
    DataRange data_range = 2;
}

// note, that there is difference from DataRange, because
// one can easily do arithmetics on this datatype:
//    [from; to] -> [from; m] U [m + 1; to]
message LineCursor {
    uint64 from_inclusive = 1;
    uint64 to_inclusive = 2;
}

message Cursor {
    oneof cursor {
        ColumnCursor column_cursor = 1;
        LineCursor line_cursor = 2;
    }
}