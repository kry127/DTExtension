syntax = "proto3";

// Author: kry127
// Purpose: this file defines control messages that solve two problems:
//   1. At Least Once guarantee for data ingestion
//   2. Parallelization of snapshot process

package yandexcloud.datatransfer.dtextension.v0_2.source;

import "api/v0_2/common.proto";

// Control item requests for snapshot process
message ReadControlItemReq {
    oneof control_item_req {
        DataItemReq data_item_req = 1;
        CursorReq cursor_req = 2;
        SplitReq split_req = 3;
        BeginSnapshotReq begin_snapshot_req = 4;
        DoneSnapshotReq done_snapshot_req = 5;
    }
}

// Control item response for snapshot process
message ReadControlItemRsp {
    oneof control_item_rsp {
        DataItemRsp data_item_rsp = 1;
        CursorRsp cursor_rsp = 2;
        SplitRsp split_rsp = 3;
        BeginSnapshotRsp begin_snapshot_rsp = 4;
        DoneSnapshotRsp done_snapshot_rsp = 5;
    }
}

// This message is sent in order to acquire snapshot cursor
// that will iterate through snapshotting values
message CursorReq {}
message CursorRsp {
    Result result = 1;
    Cursor cursor = 2;
}

// This message is send when data agent that uses the API cannot
// split uploading range on parts. This may be caused because of the
// unknown type of database column. So when receiving this message
// you should perform split of the data range on parts
message SplitReq {
    DataRange data_range = 1;
}
// Number of resulting parts are not reglamented right now, but
// simple split by two equal parts is recommended default action.
// Word 'equal' is a bit tricky, because it is recommended to
// spread the lines of data equally by two parts and it depends,
// for example, from the distribution of values in the column.
// But since distribution of data is unknown in general case,
// split by midpoint is OK.
message SplitRsp {
    Result result = 1;
    repeated DataRange data_range = 2;
}

// This message designates snapshot beginning
// When this message comes, source connector should designate bounds
// of transferring lines, or take read snapshot lock for consistency
message BeginSnapshotReq {}
message BeginSnapshotRsp {
    Result result = 1;
}

// This message designates a finish of snapshot
// Resources that might have been allocated during BeginSnapshotReq may be freed now
message DoneSnapshotReq {}
message DoneSnapshotRsp {
    Result result = 1;
}

// This message requests data change item
message DataItemReq {}
message DataItemRsp {
    Result result = 1;
    ChangeItem change_item = 2;
}

message StreamControlItemReq {
    oneof control_item_req {
        DataItemReq data_item_req = 1;
        FixLsnReq fix_lsn_req = 2;
        CheckLsnReq check_lsn_req = 3;
        RewindLsnReq rewind_lsn_req = 4;
    }
}

message StreamControlItemRsp {
    oneof control_item_rsp {
        DataItemRsp data_item_rsp = 1;
        FixLsnRsp fix_lsn_rsp = 2;
        CheckLsnRsp check_lsn_rsp = 3;
        RewindLsnReq rewind_lsn_req = 4;

        LostRequestedLsnRsp lost_requested_lsn_rsp = 404;
    }
}

// This message requests to fix current LSN.
// The returned message is user LSN that designate where stream will be read from
// After this message, each further read of item moves LSN forward
message FixLsnReq {}
message FixLsnRsp {
    Result result = 1;
    ColumnData lsn = 2;
}

// This message queries is LSN is still presented in the stream
message CheckLsnReq {
    ColumnData lsn = 1;
}
message CheckLsnRsp {
    Result result = 1;
}

// This message rewinds LSN (e.g. makes it no longer fixed to a certain point)
message RewindLsnReq {}
message RewindLsnRsp {
    Result result = 1;
}

// This message notifies user that requested next item that his LSN
// has been lost from the log.
message LostRequestedLsnRsp {}