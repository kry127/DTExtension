syntax = "proto3";

// Author: kry127
// Purpose: this file defines control messages that solve two problems:
//   1. At Least Once guarantee for data ingestion
//   2. Parallelization of snapshot process

package yandexcloud.datatransfer.dtextension.v0_2.source;

import "api/v0_2/common.proto";
import "api/v0_2/data.proto";

// There are two types of control items:
//  1. ReadControlItemReq/ReadControlItemRsp -- control items for Read protocol
//  2. StreamControlItemReq/StreamControlItemRsp -- control items for Stream protocol
// Most commonly, there is such system of interaction: client sends "<Type>Req" message,
// and server responds with single "<Type>Rsp" message.
// The only exception is ChangeStreamReq -- this single request produces multibple ChangeStreamRsp.

// Control item requests for snapshot process
message ReadCtlReq {
    oneof ctl_req {
        InitReq init_req = 1;
        CursorReq cursor_req = 2;
        ReadChangeReq read_change_req = 3;
        BeginSnapshotReq begin_snapshot_req = 4;
        DoneSnapshotReq done_snapshot_req = 5;
    }
}

// Control item response for snapshot process
message ReadCtlRsp {
    oneof ctl_rsp {
        InitRsp init_rsp = 1;
        CursorRsp cursor_rsp = 2;
        ReadChangeRsp read_change_rsp = 3;
        BeginSnapshotRsp begin_snapshot_rsp = 4;
        DoneSnapshotRsp done_snapshot_rsp = 5;
    }
}

// This message requests stream of data change item specified by cursor
message ReadChangeReq {
    Cursor cursor = 1;
}
// After receiving ReadChangeReq, server should produce series of ReadChangeRsp containing data in change_item
// field. When sequence of ReadChangeRsp ends from server side, server should send last ReadChangeRsp message
// with "checkpoint" message. The client should wait until this message until further actions.
message ReadChangeRsp {
    oneof change_stream_item {
        ChangeItem change_item = 1;
        CheckPoint checkpoint = 2;
    }

    // CheckPoint message should advance cursor in order to retrieve new values,
    // otherwise source may stuck sending the same values over and over again
    message CheckPoint {
        Cursor cursor = 1;
    }
}

// This message is sent in order to acquire snapshot cursor
// that will iterate through snapshotting values
// note, that cursor value will be stored in general response
message CursorReq {
    // This parameter designates preferred column for cursor
    string preferred_column = 1;
}
message CursorRsp {
    Cursor cursor = 1;
    // TODO add statistics
}

// This message designates snapshot beginning
// When this message comes, source connector should designate bounds
// of transferring lines, or take read snapshot lock for consistency
message BeginSnapshotReq {}
message BeginSnapshotRsp {
    // this optional parameter is used to save snapshot state binary representation
    bytes snapshot_state = 2;
}

// This message designates a finish of snapshot
// Resources that might have been allocated during BeginSnapshotReq may be freed now
message DoneSnapshotReq {
    bytes snapshot_state = 1;
}
message DoneSnapshotRsp {}