//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: api/v0_2/source/control.proto

package yandexcloud.datatransfer.dtextension.v0_2.source;

@kotlin.jvm.JvmName("-initializerewindLsnReq")
public inline fun rewindLsnReq(block: yandexcloud.datatransfer.dtextension.v0_2.source.RewindLsnReqKt.Dsl.() -> kotlin.Unit): yandexcloud.datatransfer.dtextension.v0_2.source.Control.RewindLsnReq =
  yandexcloud.datatransfer.dtextension.v0_2.source.RewindLsnReqKt.Dsl._create(yandexcloud.datatransfer.dtextension.v0_2.source.Control.RewindLsnReq.newBuilder()).apply { block() }._build()
public object RewindLsnReqKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: yandexcloud.datatransfer.dtextension.v0_2.source.Control.RewindLsnReq.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: yandexcloud.datatransfer.dtextension.v0_2.source.Control.RewindLsnReq.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): yandexcloud.datatransfer.dtextension.v0_2.source.Control.RewindLsnReq = _builder.build()

    /**
     * <pre>
     * the replication state is sequece of bytes returned by `FixLsnReq` and it is needed to free resources allocated
     * to lock replication position
     * </pre>
     *
     * <code>bytes replication_state = 1;</code>
     */
    public var replicationState: com.google.protobuf.ByteString
      @JvmName("getReplicationState")
      get() = _builder.getReplicationState()
      @JvmName("setReplicationState")
      set(value) {
        _builder.setReplicationState(value)
      }
    /**
     * <pre>
     * the replication state is sequece of bytes returned by `FixLsnReq` and it is needed to free resources allocated
     * to lock replication position
     * </pre>
     *
     * <code>bytes replication_state = 1;</code>
     */
    public fun clearReplicationState() {
      _builder.clearReplicationState()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun yandexcloud.datatransfer.dtextension.v0_2.source.Control.RewindLsnReq.copy(block: yandexcloud.datatransfer.dtextension.v0_2.source.RewindLsnReqKt.Dsl.() -> kotlin.Unit): yandexcloud.datatransfer.dtextension.v0_2.source.Control.RewindLsnReq =
  yandexcloud.datatransfer.dtextension.v0_2.source.RewindLsnReqKt.Dsl._create(this.toBuilder()).apply { block() }._build()

