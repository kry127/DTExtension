//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: api/v0_2/source/source_service.proto

package yandexcloud.datatransfer.dtextension.v0_2.source;

@kotlin.jvm.JvmName("-initializestreamReq")
public inline fun streamReq(block: yandexcloud.datatransfer.dtextension.v0_2.source.StreamReqKt.Dsl.() -> kotlin.Unit): yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq =
  yandexcloud.datatransfer.dtextension.v0_2.source.StreamReqKt.Dsl._create(yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.newBuilder()).apply { block() }._build()
public object StreamReqKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq = _builder.build()

    /**
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.source.StreamReq.StreamSource source = 1;</code>
     */
    public var source: yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.StreamSource
      @JvmName("getSource")
      get() = _builder.getSource()
      @JvmName("setSource")
      set(value) {
        _builder.setSource(value)
      }
    /**
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.source.StreamReq.StreamSource source = 1;</code>
     */
    public fun clearSource() {
      _builder.clearSource()
    }
    /**
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.source.StreamReq.StreamSource source = 1;</code>
     * @return Whether the source field is set.
     */
    public fun hasSource(): kotlin.Boolean {
      return _builder.hasSource()
    }

    /**
     * <pre>
     * this is also exclusive (as in data range)
     * can be null on initialization or when replication begins immediately
     * by the way, in MySQL/MongoDB we can make simple check: if LSN is presented in log, then
     * we have nothing missed. Otherwise, we missed the log position =(
     * </pre>
     *
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.ColumnValue lsn = 2;</code>
     */
    public var lsn: yandexcloud.datatransfer.dtextension.v0_2.Data.ColumnValue
      @JvmName("getLsn")
      get() = _builder.getLsn()
      @JvmName("setLsn")
      set(value) {
        _builder.setLsn(value)
      }
    /**
     * <pre>
     * this is also exclusive (as in data range)
     * can be null on initialization or when replication begins immediately
     * by the way, in MySQL/MongoDB we can make simple check: if LSN is presented in log, then
     * we have nothing missed. Otherwise, we missed the log position =(
     * </pre>
     *
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.ColumnValue lsn = 2;</code>
     */
    public fun clearLsn() {
      _builder.clearLsn()
    }
    /**
     * <pre>
     * this is also exclusive (as in data range)
     * can be null on initialization or when replication begins immediately
     * by the way, in MySQL/MongoDB we can make simple check: if LSN is presented in log, then
     * we have nothing missed. Otherwise, we missed the log position =(
     * </pre>
     *
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.ColumnValue lsn = 2;</code>
     * @return Whether the lsn field is set.
     */
    public fun hasLsn(): kotlin.Boolean {
      return _builder.hasLsn()
    }

    /**
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.source.StreamControlItemReq control_item_req = 3;</code>
     */
    public var controlItemReq: yandexcloud.datatransfer.dtextension.v0_2.source.Control.StreamControlItemReq
      @JvmName("getControlItemReq")
      get() = _builder.getControlItemReq()
      @JvmName("setControlItemReq")
      set(value) {
        _builder.setControlItemReq(value)
      }
    /**
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.source.StreamControlItemReq control_item_req = 3;</code>
     */
    public fun clearControlItemReq() {
      _builder.clearControlItemReq()
    }
    /**
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.source.StreamControlItemReq control_item_req = 3;</code>
     * @return Whether the controlItemReq field is set.
     */
    public fun hasControlItemReq(): kotlin.Boolean {
      return _builder.hasControlItemReq()
    }
  }
  @kotlin.jvm.JvmName("-initializestreamSource")
  public inline fun streamSource(block: yandexcloud.datatransfer.dtextension.v0_2.source.StreamReqKt.StreamSourceKt.Dsl.() -> kotlin.Unit): yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.StreamSource =
    yandexcloud.datatransfer.dtextension.v0_2.source.StreamReqKt.StreamSourceKt.Dsl._create(yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.StreamSource.newBuilder()).apply { block() }._build()
  public object StreamSourceKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.StreamSource.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.StreamSource.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.StreamSource = _builder.build()

      /**
       * <code>.yandexcloud.datatransfer.dtextension.v0_2.Table table = 1;</code>
       */
      public var table: yandexcloud.datatransfer.dtextension.v0_2.Data.Table
        @JvmName("getTable")
        get() = _builder.getTable()
        @JvmName("setTable")
        set(value) {
          _builder.setTable(value)
        }
      /**
       * <code>.yandexcloud.datatransfer.dtextension.v0_2.Table table = 1;</code>
       */
      public fun clearTable() {
        _builder.clearTable()
      }
      /**
       * <code>.yandexcloud.datatransfer.dtextension.v0_2.Table table = 1;</code>
       * @return Whether the table field is set.
       */
      public fun hasTable(): kotlin.Boolean {
        return _builder.hasTable()
      }

      /**
       * <code>.yandexcloud.datatransfer.dtextension.v0_2.Namespace namespace = 2;</code>
       */
      public var namespace: yandexcloud.datatransfer.dtextension.v0_2.Data.Namespace
        @JvmName("getNamespace")
        get() = _builder.getNamespace()
        @JvmName("setNamespace")
        set(value) {
          _builder.setNamespace(value)
        }
      /**
       * <code>.yandexcloud.datatransfer.dtextension.v0_2.Namespace namespace = 2;</code>
       */
      public fun clearNamespace() {
        _builder.clearNamespace()
      }
      /**
       * <code>.yandexcloud.datatransfer.dtextension.v0_2.Namespace namespace = 2;</code>
       * @return Whether the namespace field is set.
       */
      public fun hasNamespace(): kotlin.Boolean {
        return _builder.hasNamespace()
      }

      /**
       * <code>.yandexcloud.datatransfer.dtextension.v0_2.source.StreamReq.StreamSource.Cluster cluster = 3;</code>
       */
      public var cluster: yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.StreamSource.Cluster
        @JvmName("getCluster")
        get() = _builder.getCluster()
        @JvmName("setCluster")
        set(value) {
          _builder.setCluster(value)
        }
      /**
       * <code>.yandexcloud.datatransfer.dtextension.v0_2.source.StreamReq.StreamSource.Cluster cluster = 3;</code>
       */
      public fun clearCluster() {
        _builder.clearCluster()
      }
      /**
       * <code>.yandexcloud.datatransfer.dtextension.v0_2.source.StreamReq.StreamSource.Cluster cluster = 3;</code>
       * @return Whether the cluster field is set.
       */
      public fun hasCluster(): kotlin.Boolean {
        return _builder.hasCluster()
      }
      public val sourceCase: yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.StreamSource.SourceCase
        @JvmName("getSourceCase")
        get() = _builder.getSourceCase()

      public fun clearSource() {
        _builder.clearSource()
      }
    }
    @kotlin.jvm.JvmName("-initializecluster")
    public inline fun cluster(block: yandexcloud.datatransfer.dtextension.v0_2.source.StreamReqKt.StreamSourceKt.ClusterKt.Dsl.() -> kotlin.Unit): yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.StreamSource.Cluster =
      yandexcloud.datatransfer.dtextension.v0_2.source.StreamReqKt.StreamSourceKt.ClusterKt.Dsl._create(yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.StreamSource.Cluster.newBuilder()).apply { block() }._build()
    public object ClusterKt {
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      @com.google.protobuf.kotlin.ProtoDslMarker
      public class Dsl private constructor(
        private val _builder: yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.StreamSource.Cluster.Builder
      ) {
        public companion object {
          @kotlin.jvm.JvmSynthetic
          @kotlin.PublishedApi
          internal fun _create(builder: yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.StreamSource.Cluster.Builder): Dsl = Dsl(builder)
        }

        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _build(): yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.StreamSource.Cluster = _builder.build()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.copy(block: yandexcloud.datatransfer.dtextension.v0_2.source.StreamReqKt.Dsl.() -> kotlin.Unit): yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq =
  yandexcloud.datatransfer.dtextension.v0_2.source.StreamReqKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.StreamSource.copy(block: yandexcloud.datatransfer.dtextension.v0_2.source.StreamReqKt.StreamSourceKt.Dsl.() -> kotlin.Unit): yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.StreamSource =
  yandexcloud.datatransfer.dtextension.v0_2.source.StreamReqKt.StreamSourceKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.StreamSource.Cluster.copy(block: yandexcloud.datatransfer.dtextension.v0_2.source.StreamReqKt.StreamSourceKt.ClusterKt.Dsl.() -> kotlin.Unit): yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.StreamSource.Cluster =
  yandexcloud.datatransfer.dtextension.v0_2.source.StreamReqKt.StreamSourceKt.ClusterKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.StreamSourceOrBuilder.tableOrNull: yandexcloud.datatransfer.dtextension.v0_2.Data.Table?
  get() = if (hasTable()) getTable() else null

val yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.StreamSourceOrBuilder.namespaceOrNull: yandexcloud.datatransfer.dtextension.v0_2.Data.Namespace?
  get() = if (hasNamespace()) getNamespace() else null

val yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.StreamSourceOrBuilder.clusterOrNull: yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.StreamSource.Cluster?
  get() = if (hasCluster()) getCluster() else null

val yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReqOrBuilder.sourceOrNull: yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReq.StreamSource?
  get() = if (hasSource()) getSource() else null

val yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReqOrBuilder.lsnOrNull: yandexcloud.datatransfer.dtextension.v0_2.Data.ColumnValue?
  get() = if (hasLsn()) getLsn() else null

val yandexcloud.datatransfer.dtextension.v0_2.source.SourceServiceOuterClass.StreamReqOrBuilder.controlItemReqOrNull: yandexcloud.datatransfer.dtextension.v0_2.source.Control.StreamControlItemReq?
  get() = if (hasControlItemReq()) getControlItemReq() else null

