//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: api/v0_2/data.proto

package yandexcloud.datatransfer.dtextension.v0_2;

@kotlin.jvm.JvmName("-initializecolumn")
public inline fun column(block: yandexcloud.datatransfer.dtextension.v0_2.ColumnKt.Dsl.() -> kotlin.Unit): yandexcloud.datatransfer.dtextension.v0_2.Data.Column =
  yandexcloud.datatransfer.dtextension.v0_2.ColumnKt.Dsl._create(yandexcloud.datatransfer.dtextension.v0_2.Data.Column.newBuilder()).apply { block() }._build()
public object ColumnKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: yandexcloud.datatransfer.dtextension.v0_2.Data.Column.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: yandexcloud.datatransfer.dtextension.v0_2.Data.Column.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): yandexcloud.datatransfer.dtextension.v0_2.Data.Column = _builder.build()

    /**
     * <code>string name = 1;</code>
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <code>string name = 1;</code>
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * <code>bool key = 2;</code>
     */
    public var key: kotlin.Boolean
      @JvmName("getKey")
      get() = _builder.getKey()
      @JvmName("setKey")
      set(value) {
        _builder.setKey(value)
      }
    /**
     * <code>bool key = 2;</code>
     */
    public fun clearKey() {
      _builder.clearKey()
    }

    /**
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.ColumnType type = 3;</code>
     */
    public var type: yandexcloud.datatransfer.dtextension.v0_2.Data.ColumnType
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.ColumnType type = 3;</code>
     */
    public fun clearType() {
      _builder.clearType()
    }

    /**
     * <code>optional .yandexcloud.datatransfer.dtextension.v0_2.Column.OriginalType original_type = 4;</code>
     */
    public var originalType: yandexcloud.datatransfer.dtextension.v0_2.Data.Column.OriginalType
      @JvmName("getOriginalType")
      get() = _builder.getOriginalType()
      @JvmName("setOriginalType")
      set(value) {
        _builder.setOriginalType(value)
      }
    /**
     * <code>optional .yandexcloud.datatransfer.dtextension.v0_2.Column.OriginalType original_type = 4;</code>
     */
    public fun clearOriginalType() {
      _builder.clearOriginalType()
    }
    /**
     * <code>optional .yandexcloud.datatransfer.dtextension.v0_2.Column.OriginalType original_type = 4;</code>
     * @return Whether the originalType field is set.
     */
    public fun hasOriginalType(): kotlin.Boolean {
      return _builder.hasOriginalType()
    }
    public val ColumnKt.Dsl.originalTypeOrNull: yandexcloud.datatransfer.dtextension.v0_2.Data.Column.OriginalType?
      get() = _builder.originalTypeOrNull
  }
  @kotlin.jvm.JvmName("-initializeoriginalType")
  public inline fun originalType(block: yandexcloud.datatransfer.dtextension.v0_2.ColumnKt.OriginalTypeKt.Dsl.() -> kotlin.Unit): yandexcloud.datatransfer.dtextension.v0_2.Data.Column.OriginalType =
    yandexcloud.datatransfer.dtextension.v0_2.ColumnKt.OriginalTypeKt.Dsl._create(yandexcloud.datatransfer.dtextension.v0_2.Data.Column.OriginalType.newBuilder()).apply { block() }._build()
  public object OriginalTypeKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: yandexcloud.datatransfer.dtextension.v0_2.Data.Column.OriginalType.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: yandexcloud.datatransfer.dtextension.v0_2.Data.Column.OriginalType.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): yandexcloud.datatransfer.dtextension.v0_2.Data.Column.OriginalType = _builder.build()

      /**
       * <pre>
       * use connector_id to identify connector source which produces original type
       * this is recommended because of the data representation that can differ
       * </pre>
       *
       * <code>string connector_id = 1;</code>
       */
      public var connectorId: kotlin.String
        @JvmName("getConnectorId")
        get() = _builder.getConnectorId()
        @JvmName("setConnectorId")
        set(value) {
          _builder.setConnectorId(value)
        }
      /**
       * <pre>
       * use connector_id to identify connector source which produces original type
       * this is recommended because of the data representation that can differ
       * </pre>
       *
       * <code>string connector_id = 1;</code>
       */
      public fun clearConnectorId() {
        _builder.clearConnectorId()
      }

      /**
       * <pre>
       * custom type name
       * </pre>
       *
       * <code>string type_name = 2;</code>
       */
      public var typeName: kotlin.String
        @JvmName("getTypeName")
        get() = _builder.getTypeName()
        @JvmName("setTypeName")
        set(value) {
          _builder.setTypeName(value)
        }
      /**
       * <pre>
       * custom type name
       * </pre>
       *
       * <code>string type_name = 2;</code>
       */
      public fun clearTypeName() {
        _builder.clearTypeName()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun yandexcloud.datatransfer.dtextension.v0_2.Data.Column.copy(block: yandexcloud.datatransfer.dtextension.v0_2.ColumnKt.Dsl.() -> kotlin.Unit): yandexcloud.datatransfer.dtextension.v0_2.Data.Column =
  yandexcloud.datatransfer.dtextension.v0_2.ColumnKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun yandexcloud.datatransfer.dtextension.v0_2.Data.Column.OriginalType.copy(block: yandexcloud.datatransfer.dtextension.v0_2.ColumnKt.OriginalTypeKt.Dsl.() -> kotlin.Unit): yandexcloud.datatransfer.dtextension.v0_2.Data.Column.OriginalType =
  yandexcloud.datatransfer.dtextension.v0_2.ColumnKt.OriginalTypeKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val yandexcloud.datatransfer.dtextension.v0_2.Data.ColumnOrBuilder.originalTypeOrNull: yandexcloud.datatransfer.dtextension.v0_2.Data.Column.OriginalType?
  get() = if (hasOriginalType()) getOriginalType() else null

