//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: api/v0_2/sink/control.proto

package yandexcloud.datatransfer.dtextension.v0_2.sink;

@kotlin.jvm.JvmName("-initializewriteDoneSnapshotReq")
public inline fun writeDoneSnapshotReq(block: yandexcloud.datatransfer.dtextension.v0_2.sink.WriteDoneSnapshotReqKt.Dsl.() -> kotlin.Unit): yandexcloud.datatransfer.dtextension.v0_2.sink.Control.WriteDoneSnapshotReq =
  yandexcloud.datatransfer.dtextension.v0_2.sink.WriteDoneSnapshotReqKt.Dsl._create(yandexcloud.datatransfer.dtextension.v0_2.sink.Control.WriteDoneSnapshotReq.newBuilder()).apply { block() }._build()
public object WriteDoneSnapshotReqKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: yandexcloud.datatransfer.dtextension.v0_2.sink.Control.WriteDoneSnapshotReq.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: yandexcloud.datatransfer.dtextension.v0_2.sink.Control.WriteDoneSnapshotReq.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): yandexcloud.datatransfer.dtextension.v0_2.sink.Control.WriteDoneSnapshotReq = _builder.build()

    /**
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.Table table = 1;</code>
     */
    public var table: yandexcloud.datatransfer.dtextension.v0_2.Data.Table
      @JvmName("getTable")
      get() = _builder.getTable()
      @JvmName("setTable")
      set(value) {
        _builder.setTable(value)
      }
    /**
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.Table table = 1;</code>
     */
    public fun clearTable() {
      _builder.clearTable()
    }
    /**
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.Table table = 1;</code>
     * @return Whether the table field is set.
     */
    public fun hasTable(): kotlin.Boolean {
      return _builder.hasTable()
    }

    /**
     * <code>bytes snapshot_state = 2;</code>
     */
    public var snapshotState: com.google.protobuf.ByteString
      @JvmName("getSnapshotState")
      get() = _builder.getSnapshotState()
      @JvmName("setSnapshotState")
      set(value) {
        _builder.setSnapshotState(value)
      }
    /**
     * <code>bytes snapshot_state = 2;</code>
     */
    public fun clearSnapshotState() {
      _builder.clearSnapshotState()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun yandexcloud.datatransfer.dtextension.v0_2.sink.Control.WriteDoneSnapshotReq.copy(block: yandexcloud.datatransfer.dtextension.v0_2.sink.WriteDoneSnapshotReqKt.Dsl.() -> kotlin.Unit): yandexcloud.datatransfer.dtextension.v0_2.sink.Control.WriteDoneSnapshotReq =
  yandexcloud.datatransfer.dtextension.v0_2.sink.WriteDoneSnapshotReqKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val yandexcloud.datatransfer.dtextension.v0_2.sink.Control.WriteDoneSnapshotReqOrBuilder.tableOrNull: yandexcloud.datatransfer.dtextension.v0_2.Data.Table?
  get() = if (hasTable()) getTable() else null

