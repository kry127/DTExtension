//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: api/v0_2/source/control.proto

package yandexcloud.datatransfer.dtextension.v0_2.source;

@kotlin.jvm.JvmName("-initializesplitRsp")
public inline fun splitRsp(block: yandexcloud.datatransfer.dtextension.v0_2.source.SplitRspKt.Dsl.() -> kotlin.Unit): yandexcloud.datatransfer.dtextension.v0_2.source.Control.SplitRsp =
  yandexcloud.datatransfer.dtextension.v0_2.source.SplitRspKt.Dsl._create(yandexcloud.datatransfer.dtextension.v0_2.source.Control.SplitRsp.newBuilder()).apply { block() }._build()
public object SplitRspKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: yandexcloud.datatransfer.dtextension.v0_2.source.Control.SplitRsp.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: yandexcloud.datatransfer.dtextension.v0_2.source.Control.SplitRsp.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): yandexcloud.datatransfer.dtextension.v0_2.source.Control.SplitRsp = _builder.build()

    /**
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.Result result = 1;</code>
     */
    public var result: yandexcloud.datatransfer.dtextension.v0_2.Common.Result
      @JvmName("getResult")
      get() = _builder.getResult()
      @JvmName("setResult")
      set(value) {
        _builder.setResult(value)
      }
    /**
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.Result result = 1;</code>
     */
    public fun clearResult() {
      _builder.clearResult()
    }
    /**
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.Result result = 1;</code>
     * @return Whether the result field is set.
     */
    public fun hasResult(): kotlin.Boolean {
      return _builder.hasResult()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class DataRangeProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated .yandexcloud.datatransfer.dtextension.v0_2.DataRange data_range = 2;</code>
     */
     public val dataRange: com.google.protobuf.kotlin.DslList<yandexcloud.datatransfer.dtextension.v0_2.Common.DataRange, DataRangeProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getDataRangeList()
      )
    /**
     * <code>repeated .yandexcloud.datatransfer.dtextension.v0_2.DataRange data_range = 2;</code>
     * @param value The dataRange to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addDataRange")
    public fun com.google.protobuf.kotlin.DslList<yandexcloud.datatransfer.dtextension.v0_2.Common.DataRange, DataRangeProxy>.add(value: yandexcloud.datatransfer.dtextension.v0_2.Common.DataRange) {
      _builder.addDataRange(value)
    }
    /**
     * <code>repeated .yandexcloud.datatransfer.dtextension.v0_2.DataRange data_range = 2;</code>
     * @param value The dataRange to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignDataRange")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<yandexcloud.datatransfer.dtextension.v0_2.Common.DataRange, DataRangeProxy>.plusAssign(value: yandexcloud.datatransfer.dtextension.v0_2.Common.DataRange) {
      add(value)
    }
    /**
     * <code>repeated .yandexcloud.datatransfer.dtextension.v0_2.DataRange data_range = 2;</code>
     * @param values The dataRange to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllDataRange")
    public fun com.google.protobuf.kotlin.DslList<yandexcloud.datatransfer.dtextension.v0_2.Common.DataRange, DataRangeProxy>.addAll(values: kotlin.collections.Iterable<yandexcloud.datatransfer.dtextension.v0_2.Common.DataRange>) {
      _builder.addAllDataRange(values)
    }
    /**
     * <code>repeated .yandexcloud.datatransfer.dtextension.v0_2.DataRange data_range = 2;</code>
     * @param values The dataRange to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllDataRange")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<yandexcloud.datatransfer.dtextension.v0_2.Common.DataRange, DataRangeProxy>.plusAssign(values: kotlin.collections.Iterable<yandexcloud.datatransfer.dtextension.v0_2.Common.DataRange>) {
      addAll(values)
    }
    /**
     * <code>repeated .yandexcloud.datatransfer.dtextension.v0_2.DataRange data_range = 2;</code>
     * @param index The index to set the value at.
     * @param value The dataRange to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setDataRange")
    public operator fun com.google.protobuf.kotlin.DslList<yandexcloud.datatransfer.dtextension.v0_2.Common.DataRange, DataRangeProxy>.set(index: kotlin.Int, value: yandexcloud.datatransfer.dtextension.v0_2.Common.DataRange) {
      _builder.setDataRange(index, value)
    }
    /**
     * <code>repeated .yandexcloud.datatransfer.dtextension.v0_2.DataRange data_range = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearDataRange")
    public fun com.google.protobuf.kotlin.DslList<yandexcloud.datatransfer.dtextension.v0_2.Common.DataRange, DataRangeProxy>.clear() {
      _builder.clearDataRange()
    }

  }
}
@kotlin.jvm.JvmSynthetic
public inline fun yandexcloud.datatransfer.dtextension.v0_2.source.Control.SplitRsp.copy(block: yandexcloud.datatransfer.dtextension.v0_2.source.SplitRspKt.Dsl.() -> kotlin.Unit): yandexcloud.datatransfer.dtextension.v0_2.source.Control.SplitRsp =
  yandexcloud.datatransfer.dtextension.v0_2.source.SplitRspKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val yandexcloud.datatransfer.dtextension.v0_2.source.Control.SplitRspOrBuilder.resultOrNull: yandexcloud.datatransfer.dtextension.v0_2.Common.Result?
  get() = if (hasResult()) getResult() else null

