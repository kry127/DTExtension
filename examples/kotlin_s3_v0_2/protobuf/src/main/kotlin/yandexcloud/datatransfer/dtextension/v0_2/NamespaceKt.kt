//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: api/v0_2/data.proto

package yandexcloud.datatransfer.dtextension.v0_2;

@kotlin.jvm.JvmName("-initializenamespace")
public inline fun namespace(block: yandexcloud.datatransfer.dtextension.v0_2.NamespaceKt.Dsl.() -> kotlin.Unit): yandexcloud.datatransfer.dtextension.v0_2.Data.Namespace =
  yandexcloud.datatransfer.dtextension.v0_2.NamespaceKt.Dsl._create(yandexcloud.datatransfer.dtextension.v0_2.Data.Namespace.newBuilder()).apply { block() }._build()
public object NamespaceKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: yandexcloud.datatransfer.dtextension.v0_2.Data.Namespace.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: yandexcloud.datatransfer.dtextension.v0_2.Data.Namespace.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): yandexcloud.datatransfer.dtextension.v0_2.Data.Namespace = _builder.build()

    /**
     * <code>string namespace = 1;</code>
     */
    public var namespace: kotlin.String
      @JvmName("getNamespace")
      get() = _builder.getNamespace()
      @JvmName("setNamespace")
      set(value) {
        _builder.setNamespace(value)
      }
    /**
     * <code>string namespace = 1;</code>
     */
    public fun clearNamespace() {
      _builder.clearNamespace()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun yandexcloud.datatransfer.dtextension.v0_2.Data.Namespace.copy(block: yandexcloud.datatransfer.dtextension.v0_2.NamespaceKt.Dsl.() -> kotlin.Unit): yandexcloud.datatransfer.dtextension.v0_2.Data.Namespace =
  yandexcloud.datatransfer.dtextension.v0_2.NamespaceKt.Dsl._create(this.toBuilder()).apply { block() }._build()

