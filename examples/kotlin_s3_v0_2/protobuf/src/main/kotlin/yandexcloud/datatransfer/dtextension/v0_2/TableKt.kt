//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: api/v0_2/data.proto

package yandexcloud.datatransfer.dtextension.v0_2;

@kotlin.jvm.JvmName("-initializetable")
public inline fun table(block: yandexcloud.datatransfer.dtextension.v0_2.TableKt.Dsl.() -> kotlin.Unit): yandexcloud.datatransfer.dtextension.v0_2.Data.Table =
  yandexcloud.datatransfer.dtextension.v0_2.TableKt.Dsl._create(yandexcloud.datatransfer.dtextension.v0_2.Data.Table.newBuilder()).apply { block() }._build()
public object TableKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: yandexcloud.datatransfer.dtextension.v0_2.Data.Table.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: yandexcloud.datatransfer.dtextension.v0_2.Data.Table.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): yandexcloud.datatransfer.dtextension.v0_2.Data.Table = _builder.build()

    /**
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.Namespace namespace = 1;</code>
     */
    public var namespace: yandexcloud.datatransfer.dtextension.v0_2.Data.Namespace
      @JvmName("getNamespace")
      get() = _builder.getNamespace()
      @JvmName("setNamespace")
      set(value) {
        _builder.setNamespace(value)
      }
    /**
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.Namespace namespace = 1;</code>
     */
    public fun clearNamespace() {
      _builder.clearNamespace()
    }
    /**
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.Namespace namespace = 1;</code>
     * @return Whether the namespace field is set.
     */
    public fun hasNamespace(): kotlin.Boolean {
      return _builder.hasNamespace()
    }

    /**
     * <code>string name = 2;</code>
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <code>string name = 2;</code>
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.Schema schema = 3;</code>
     */
    public var schema: yandexcloud.datatransfer.dtextension.v0_2.Data.Schema
      @JvmName("getSchema")
      get() = _builder.getSchema()
      @JvmName("setSchema")
      set(value) {
        _builder.setSchema(value)
      }
    /**
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.Schema schema = 3;</code>
     */
    public fun clearSchema() {
      _builder.clearSchema()
    }
    /**
     * <code>.yandexcloud.datatransfer.dtextension.v0_2.Schema schema = 3;</code>
     * @return Whether the schema field is set.
     */
    public fun hasSchema(): kotlin.Boolean {
      return _builder.hasSchema()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun yandexcloud.datatransfer.dtextension.v0_2.Data.Table.copy(block: yandexcloud.datatransfer.dtextension.v0_2.TableKt.Dsl.() -> kotlin.Unit): yandexcloud.datatransfer.dtextension.v0_2.Data.Table =
  yandexcloud.datatransfer.dtextension.v0_2.TableKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val yandexcloud.datatransfer.dtextension.v0_2.Data.TableOrBuilder.namespaceOrNull: yandexcloud.datatransfer.dtextension.v0_2.Data.Namespace?
  get() = if (hasNamespace()) getNamespace() else null

val yandexcloud.datatransfer.dtextension.v0_2.Data.TableOrBuilder.schemaOrNull: yandexcloud.datatransfer.dtextension.v0_2.Data.Schema?
  get() = if (hasSchema()) getSchema() else null

