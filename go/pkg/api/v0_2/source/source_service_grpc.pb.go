// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package source

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	v0_2 "kry127.ru/dtextension/go/pkg/api/v0_2"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SourceServiceClient is the client API for SourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SourceServiceClient interface {
	// Spec is method for determining endpoint settings available for configuring
	Spec(ctx context.Context, in *v0_2.SpecReq, opts ...grpc.CallOption) (*v0_2.SpecRsp, error)
	// Check is method that checks settings of endpoint are comply to specification
	// In order to see specification see Spec handle
	Check(ctx context.Context, in *v0_2.CheckReq, opts ...grpc.CallOption) (*v0_2.CheckRsp, error)
	// Method discover is used to fetch available replication objects
	Discover(ctx context.Context, in *DiscoverReq, opts ...grpc.CallOption) (*DiscoverRsp, error)
	Read(ctx context.Context, opts ...grpc.CallOption) (SourceService_ReadClient, error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (SourceService_StreamClient, error)
}

type sourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSourceServiceClient(cc grpc.ClientConnInterface) SourceServiceClient {
	return &sourceServiceClient{cc}
}

func (c *sourceServiceClient) Spec(ctx context.Context, in *v0_2.SpecReq, opts ...grpc.CallOption) (*v0_2.SpecRsp, error) {
	out := new(v0_2.SpecRsp)
	err := c.cc.Invoke(ctx, "/yandexcloud.datatransfer.dtextension.v0_2.source.SourceService/Spec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) Check(ctx context.Context, in *v0_2.CheckReq, opts ...grpc.CallOption) (*v0_2.CheckRsp, error) {
	out := new(v0_2.CheckRsp)
	err := c.cc.Invoke(ctx, "/yandexcloud.datatransfer.dtextension.v0_2.source.SourceService/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) Discover(ctx context.Context, in *DiscoverReq, opts ...grpc.CallOption) (*DiscoverRsp, error) {
	out := new(DiscoverRsp)
	err := c.cc.Invoke(ctx, "/yandexcloud.datatransfer.dtextension.v0_2.source.SourceService/Discover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) Read(ctx context.Context, opts ...grpc.CallOption) (SourceService_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SourceService_serviceDesc.Streams[0], "/yandexcloud.datatransfer.dtextension.v0_2.source.SourceService/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &sourceServiceReadClient{stream}
	return x, nil
}

type SourceService_ReadClient interface {
	Send(*ReadReq) error
	Recv() (*ReadRsp, error)
	grpc.ClientStream
}

type sourceServiceReadClient struct {
	grpc.ClientStream
}

func (x *sourceServiceReadClient) Send(m *ReadReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sourceServiceReadClient) Recv() (*ReadRsp, error) {
	m := new(ReadRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sourceServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (SourceService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SourceService_serviceDesc.Streams[1], "/yandexcloud.datatransfer.dtextension.v0_2.source.SourceService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sourceServiceStreamClient{stream}
	return x, nil
}

type SourceService_StreamClient interface {
	Send(*StreamReq) error
	Recv() (*StreamRsp, error)
	grpc.ClientStream
}

type sourceServiceStreamClient struct {
	grpc.ClientStream
}

func (x *sourceServiceStreamClient) Send(m *StreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sourceServiceStreamClient) Recv() (*StreamRsp, error) {
	m := new(StreamRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SourceServiceServer is the server API for SourceService service.
// All implementations must embed UnimplementedSourceServiceServer
// for forward compatibility
type SourceServiceServer interface {
	// Spec is method for determining endpoint settings available for configuring
	Spec(context.Context, *v0_2.SpecReq) (*v0_2.SpecRsp, error)
	// Check is method that checks settings of endpoint are comply to specification
	// In order to see specification see Spec handle
	Check(context.Context, *v0_2.CheckReq) (*v0_2.CheckRsp, error)
	// Method discover is used to fetch available replication objects
	Discover(context.Context, *DiscoverReq) (*DiscoverRsp, error)
	Read(SourceService_ReadServer) error
	Stream(SourceService_StreamServer) error
	mustEmbedUnimplementedSourceServiceServer()
}

// UnimplementedSourceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSourceServiceServer struct {
}

func (*UnimplementedSourceServiceServer) Spec(context.Context, *v0_2.SpecReq) (*v0_2.SpecRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Spec not implemented")
}
func (*UnimplementedSourceServiceServer) Check(context.Context, *v0_2.CheckReq) (*v0_2.CheckRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (*UnimplementedSourceServiceServer) Discover(context.Context, *DiscoverReq) (*DiscoverRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discover not implemented")
}
func (*UnimplementedSourceServiceServer) Read(SourceService_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedSourceServiceServer) Stream(SourceService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (*UnimplementedSourceServiceServer) mustEmbedUnimplementedSourceServiceServer() {}

func RegisterSourceServiceServer(s *grpc.Server, srv SourceServiceServer) {
	s.RegisterService(&_SourceService_serviceDesc, srv)
}

func _SourceService_Spec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0_2.SpecReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).Spec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandexcloud.datatransfer.dtextension.v0_2.source.SourceService/Spec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).Spec(ctx, req.(*v0_2.SpecReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0_2.CheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandexcloud.datatransfer.dtextension.v0_2.source.SourceService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).Check(ctx, req.(*v0_2.CheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_Discover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).Discover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandexcloud.datatransfer.dtextension.v0_2.source.SourceService/Discover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).Discover(ctx, req.(*DiscoverReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SourceServiceServer).Read(&sourceServiceReadServer{stream})
}

type SourceService_ReadServer interface {
	Send(*ReadRsp) error
	Recv() (*ReadReq, error)
	grpc.ServerStream
}

type sourceServiceReadServer struct {
	grpc.ServerStream
}

func (x *sourceServiceReadServer) Send(m *ReadRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sourceServiceReadServer) Recv() (*ReadReq, error) {
	m := new(ReadReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SourceService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SourceServiceServer).Stream(&sourceServiceStreamServer{stream})
}

type SourceService_StreamServer interface {
	Send(*StreamRsp) error
	Recv() (*StreamReq, error)
	grpc.ServerStream
}

type sourceServiceStreamServer struct {
	grpc.ServerStream
}

func (x *sourceServiceStreamServer) Send(m *StreamRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sourceServiceStreamServer) Recv() (*StreamReq, error) {
	m := new(StreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SourceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yandexcloud.datatransfer.dtextension.v0_2.source.SourceService",
	HandlerType: (*SourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Spec",
			Handler:    _SourceService_Spec_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _SourceService_Check_Handler,
		},
		{
			MethodName: "Discover",
			Handler:    _SourceService_Discover_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _SourceService_Read_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Stream",
			Handler:       _SourceService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/v0_2/source/source_service.proto",
}
