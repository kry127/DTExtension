// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: api/v0_2/source/stream.proto

// Author: kry127
// Purpose: this file defines control messages that solve two problems:
//   1. At Least Once guarantee for data ingestion
//   2. Parallelization of snapshot process

package source

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v0_2 "kry127.ru/dtextension/go/pkg/api/v0_2"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamCtlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CtlReq:
	//	*StreamCtlReq_InitReq
	//	*StreamCtlReq_FixLsnReq
	//	*StreamCtlReq_CheckLsnReq
	//	*StreamCtlReq_RewindLsnReq
	//	*StreamCtlReq_StreamChangeReq
	CtlReq isStreamCtlReq_CtlReq `protobuf_oneof:"ctl_req"`
}

func (x *StreamCtlReq) Reset() {
	*x = StreamCtlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_source_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCtlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCtlReq) ProtoMessage() {}

func (x *StreamCtlReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_source_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCtlReq.ProtoReflect.Descriptor instead.
func (*StreamCtlReq) Descriptor() ([]byte, []int) {
	return file_api_v0_2_source_stream_proto_rawDescGZIP(), []int{0}
}

func (m *StreamCtlReq) GetCtlReq() isStreamCtlReq_CtlReq {
	if m != nil {
		return m.CtlReq
	}
	return nil
}

func (x *StreamCtlReq) GetInitReq() *v0_2.InitReq {
	if x, ok := x.GetCtlReq().(*StreamCtlReq_InitReq); ok {
		return x.InitReq
	}
	return nil
}

func (x *StreamCtlReq) GetFixLsnReq() *FixLsnReq {
	if x, ok := x.GetCtlReq().(*StreamCtlReq_FixLsnReq); ok {
		return x.FixLsnReq
	}
	return nil
}

func (x *StreamCtlReq) GetCheckLsnReq() *CheckLsnReq {
	if x, ok := x.GetCtlReq().(*StreamCtlReq_CheckLsnReq); ok {
		return x.CheckLsnReq
	}
	return nil
}

func (x *StreamCtlReq) GetRewindLsnReq() *RewindLsnReq {
	if x, ok := x.GetCtlReq().(*StreamCtlReq_RewindLsnReq); ok {
		return x.RewindLsnReq
	}
	return nil
}

func (x *StreamCtlReq) GetStreamChangeReq() *StreamChangeReq {
	if x, ok := x.GetCtlReq().(*StreamCtlReq_StreamChangeReq); ok {
		return x.StreamChangeReq
	}
	return nil
}

type isStreamCtlReq_CtlReq interface {
	isStreamCtlReq_CtlReq()
}

type StreamCtlReq_InitReq struct {
	InitReq *v0_2.InitReq `protobuf:"bytes,1,opt,name=init_req,json=initReq,proto3,oneof"`
}

type StreamCtlReq_FixLsnReq struct {
	FixLsnReq *FixLsnReq `protobuf:"bytes,2,opt,name=fix_lsn_req,json=fixLsnReq,proto3,oneof"`
}

type StreamCtlReq_CheckLsnReq struct {
	CheckLsnReq *CheckLsnReq `protobuf:"bytes,3,opt,name=check_lsn_req,json=checkLsnReq,proto3,oneof"`
}

type StreamCtlReq_RewindLsnReq struct {
	RewindLsnReq *RewindLsnReq `protobuf:"bytes,4,opt,name=rewind_lsn_req,json=rewindLsnReq,proto3,oneof"`
}

type StreamCtlReq_StreamChangeReq struct {
	StreamChangeReq *StreamChangeReq `protobuf:"bytes,5,opt,name=stream_change_req,json=streamChangeReq,proto3,oneof"`
}

func (*StreamCtlReq_InitReq) isStreamCtlReq_CtlReq() {}

func (*StreamCtlReq_FixLsnReq) isStreamCtlReq_CtlReq() {}

func (*StreamCtlReq_CheckLsnReq) isStreamCtlReq_CtlReq() {}

func (*StreamCtlReq_RewindLsnReq) isStreamCtlReq_CtlReq() {}

func (*StreamCtlReq_StreamChangeReq) isStreamCtlReq_CtlReq() {}

type StreamCtlRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CtlRsp:
	//	*StreamCtlRsp_InitRsp
	//	*StreamCtlRsp_FixLsnRsp
	//	*StreamCtlRsp_CheckLsnRsp
	//	*StreamCtlRsp_RewindLsnRsp
	//	*StreamCtlRsp_StreamChangeRsp
	CtlRsp isStreamCtlRsp_CtlRsp `protobuf_oneof:"ctl_rsp"`
}

func (x *StreamCtlRsp) Reset() {
	*x = StreamCtlRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_source_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCtlRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCtlRsp) ProtoMessage() {}

func (x *StreamCtlRsp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_source_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCtlRsp.ProtoReflect.Descriptor instead.
func (*StreamCtlRsp) Descriptor() ([]byte, []int) {
	return file_api_v0_2_source_stream_proto_rawDescGZIP(), []int{1}
}

func (m *StreamCtlRsp) GetCtlRsp() isStreamCtlRsp_CtlRsp {
	if m != nil {
		return m.CtlRsp
	}
	return nil
}

func (x *StreamCtlRsp) GetInitRsp() *v0_2.InitRsp {
	if x, ok := x.GetCtlRsp().(*StreamCtlRsp_InitRsp); ok {
		return x.InitRsp
	}
	return nil
}

func (x *StreamCtlRsp) GetFixLsnRsp() *FixLsnRsp {
	if x, ok := x.GetCtlRsp().(*StreamCtlRsp_FixLsnRsp); ok {
		return x.FixLsnRsp
	}
	return nil
}

func (x *StreamCtlRsp) GetCheckLsnRsp() *CheckLsnRsp {
	if x, ok := x.GetCtlRsp().(*StreamCtlRsp_CheckLsnRsp); ok {
		return x.CheckLsnRsp
	}
	return nil
}

func (x *StreamCtlRsp) GetRewindLsnRsp() *RewindLsnRsp {
	if x, ok := x.GetCtlRsp().(*StreamCtlRsp_RewindLsnRsp); ok {
		return x.RewindLsnRsp
	}
	return nil
}

func (x *StreamCtlRsp) GetStreamChangeRsp() *StreamChangeRsp {
	if x, ok := x.GetCtlRsp().(*StreamCtlRsp_StreamChangeRsp); ok {
		return x.StreamChangeRsp
	}
	return nil
}

type isStreamCtlRsp_CtlRsp interface {
	isStreamCtlRsp_CtlRsp()
}

type StreamCtlRsp_InitRsp struct {
	InitRsp *v0_2.InitRsp `protobuf:"bytes,1,opt,name=init_rsp,json=initRsp,proto3,oneof"`
}

type StreamCtlRsp_FixLsnRsp struct {
	FixLsnRsp *FixLsnRsp `protobuf:"bytes,2,opt,name=fix_lsn_rsp,json=fixLsnRsp,proto3,oneof"`
}

type StreamCtlRsp_CheckLsnRsp struct {
	CheckLsnRsp *CheckLsnRsp `protobuf:"bytes,3,opt,name=check_lsn_rsp,json=checkLsnRsp,proto3,oneof"`
}

type StreamCtlRsp_RewindLsnRsp struct {
	RewindLsnRsp *RewindLsnRsp `protobuf:"bytes,4,opt,name=rewind_lsn_rsp,json=rewindLsnRsp,proto3,oneof"`
}

type StreamCtlRsp_StreamChangeRsp struct {
	StreamChangeRsp *StreamChangeRsp `protobuf:"bytes,5,opt,name=stream_change_rsp,json=streamChangeRsp,proto3,oneof"`
}

func (*StreamCtlRsp_InitRsp) isStreamCtlRsp_CtlRsp() {}

func (*StreamCtlRsp_FixLsnRsp) isStreamCtlRsp_CtlRsp() {}

func (*StreamCtlRsp_CheckLsnRsp) isStreamCtlRsp_CtlRsp() {}

func (*StreamCtlRsp_RewindLsnRsp) isStreamCtlRsp_CtlRsp() {}

func (*StreamCtlRsp_StreamChangeRsp) isStreamCtlRsp_CtlRsp() {}

// This message requests stream of data change item
type StreamChangeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lsn *Lsn `protobuf:"bytes,1,opt,name=lsn,proto3" json:"lsn,omitempty"`
}

func (x *StreamChangeReq) Reset() {
	*x = StreamChangeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_source_stream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChangeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChangeReq) ProtoMessage() {}

func (x *StreamChangeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_source_stream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChangeReq.ProtoReflect.Descriptor instead.
func (*StreamChangeReq) Descriptor() ([]byte, []int) {
	return file_api_v0_2_source_stream_proto_rawDescGZIP(), []int{2}
}

func (x *StreamChangeReq) GetLsn() *Lsn {
	if x != nil {
		return x.Lsn
	}
	return nil
}

// After receiving StreamChangeReq, server should produce series of StreamChangeRsp containing data in change_item
// field. When sequence of ChangeStreamRsp ends from server side, server should send last ChangeStreamRsp message
// with "checkpoint" message. Change items sent from StreamChangeReq until CheckPoint considered as a
// single transaction with respective LSN borders. The client should wait until message CheckPoint until further actions.
type StreamChangeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ChangeStreamItem:
	//	*StreamChangeRsp_ChangeItem
	//	*StreamChangeRsp_Checkpoint
	//	*StreamChangeRsp_LostLsn_
	ChangeStreamItem isStreamChangeRsp_ChangeStreamItem `protobuf_oneof:"change_stream_item"`
}

func (x *StreamChangeRsp) Reset() {
	*x = StreamChangeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_source_stream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChangeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChangeRsp) ProtoMessage() {}

func (x *StreamChangeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_source_stream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChangeRsp.ProtoReflect.Descriptor instead.
func (*StreamChangeRsp) Descriptor() ([]byte, []int) {
	return file_api_v0_2_source_stream_proto_rawDescGZIP(), []int{3}
}

func (m *StreamChangeRsp) GetChangeStreamItem() isStreamChangeRsp_ChangeStreamItem {
	if m != nil {
		return m.ChangeStreamItem
	}
	return nil
}

func (x *StreamChangeRsp) GetChangeItem() *v0_2.ChangeItem {
	if x, ok := x.GetChangeStreamItem().(*StreamChangeRsp_ChangeItem); ok {
		return x.ChangeItem
	}
	return nil
}

func (x *StreamChangeRsp) GetCheckpoint() *StreamChangeRsp_CheckPoint {
	if x, ok := x.GetChangeStreamItem().(*StreamChangeRsp_Checkpoint); ok {
		return x.Checkpoint
	}
	return nil
}

func (x *StreamChangeRsp) GetLostLsn() *StreamChangeRsp_LostLsn {
	if x, ok := x.GetChangeStreamItem().(*StreamChangeRsp_LostLsn_); ok {
		return x.LostLsn
	}
	return nil
}

type isStreamChangeRsp_ChangeStreamItem interface {
	isStreamChangeRsp_ChangeStreamItem()
}

type StreamChangeRsp_ChangeItem struct {
	ChangeItem *v0_2.ChangeItem `protobuf:"bytes,2,opt,name=change_item,json=changeItem,proto3,oneof"`
}

type StreamChangeRsp_Checkpoint struct {
	Checkpoint *StreamChangeRsp_CheckPoint `protobuf:"bytes,3,opt,name=checkpoint,proto3,oneof"`
}

type StreamChangeRsp_LostLsn_ struct {
	LostLsn *StreamChangeRsp_LostLsn `protobuf:"bytes,4,opt,name=lost_lsn,json=lostLsn,proto3,oneof"`
}

func (*StreamChangeRsp_ChangeItem) isStreamChangeRsp_ChangeStreamItem() {}

func (*StreamChangeRsp_Checkpoint) isStreamChangeRsp_ChangeStreamItem() {}

func (*StreamChangeRsp_LostLsn_) isStreamChangeRsp_ChangeStreamItem() {}

type StreamSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*StreamSource_Table
	//	*StreamSource_Namespace
	//	*StreamSource_Cluster_
	Source isStreamSource_Source `protobuf_oneof:"source"`
}

func (x *StreamSource) Reset() {
	*x = StreamSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_source_stream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSource) ProtoMessage() {}

func (x *StreamSource) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_source_stream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSource.ProtoReflect.Descriptor instead.
func (*StreamSource) Descriptor() ([]byte, []int) {
	return file_api_v0_2_source_stream_proto_rawDescGZIP(), []int{4}
}

func (m *StreamSource) GetSource() isStreamSource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *StreamSource) GetTable() *v0_2.Table {
	if x, ok := x.GetSource().(*StreamSource_Table); ok {
		return x.Table
	}
	return nil
}

func (x *StreamSource) GetNamespace() *v0_2.Namespace {
	if x, ok := x.GetSource().(*StreamSource_Namespace); ok {
		return x.Namespace
	}
	return nil
}

func (x *StreamSource) GetCluster() *StreamSource_Cluster {
	if x, ok := x.GetSource().(*StreamSource_Cluster_); ok {
		return x.Cluster
	}
	return nil
}

type isStreamSource_Source interface {
	isStreamSource_Source()
}

type StreamSource_Table struct {
	Table *v0_2.Table `protobuf:"bytes,1,opt,name=table,proto3,oneof"`
}

type StreamSource_Namespace struct {
	Namespace *v0_2.Namespace `protobuf:"bytes,2,opt,name=namespace,proto3,oneof"`
}

type StreamSource_Cluster_ struct {
	Cluster *StreamSource_Cluster `protobuf:"bytes,3,opt,name=cluster,proto3,oneof"`
}

func (*StreamSource_Table) isStreamSource_Source() {}

func (*StreamSource_Namespace) isStreamSource_Source() {}

func (*StreamSource_Cluster_) isStreamSource_Source() {}

// LSN is defined by source from where LSN is dragged and value of LSN itself
type Lsn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamSource *StreamSource     `protobuf:"bytes,1,opt,name=stream_source,json=streamSource,proto3" json:"stream_source,omitempty"`
	LsnValue     *v0_2.ColumnValue `protobuf:"bytes,2,opt,name=lsn_value,json=lsnValue,proto3" json:"lsn_value,omitempty"`
	// this is an optional field associated with LSN allocation if source have to store some additional info for fixing LSN position
	ReplicationState []byte `protobuf:"bytes,3,opt,name=replication_state,json=replicationState,proto3" json:"replication_state,omitempty"`
}

func (x *Lsn) Reset() {
	*x = Lsn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_source_stream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lsn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lsn) ProtoMessage() {}

func (x *Lsn) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_source_stream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lsn.ProtoReflect.Descriptor instead.
func (*Lsn) Descriptor() ([]byte, []int) {
	return file_api_v0_2_source_stream_proto_rawDescGZIP(), []int{5}
}

func (x *Lsn) GetStreamSource() *StreamSource {
	if x != nil {
		return x.StreamSource
	}
	return nil
}

func (x *Lsn) GetLsnValue() *v0_2.ColumnValue {
	if x != nil {
		return x.LsnValue
	}
	return nil
}

func (x *Lsn) GetReplicationState() []byte {
	if x != nil {
		return x.ReplicationState
	}
	return nil
}

// This message requests to fix current LSN for specified replication source
// The returned message is user LSN that designate where stream will be read from
// After this message, each further read of item moves LSN forward
type FixLsnReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamSource *StreamSource `protobuf:"bytes,1,opt,name=stream_source,json=streamSource,proto3" json:"stream_source,omitempty"`
}

func (x *FixLsnReq) Reset() {
	*x = FixLsnReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_source_stream_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixLsnReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixLsnReq) ProtoMessage() {}

func (x *FixLsnReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_source_stream_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixLsnReq.ProtoReflect.Descriptor instead.
func (*FixLsnReq) Descriptor() ([]byte, []int) {
	return file_api_v0_2_source_stream_proto_rawDescGZIP(), []int{6}
}

func (x *FixLsnReq) GetStreamSource() *StreamSource {
	if x != nil {
		return x.StreamSource
	}
	return nil
}

type FixLsnRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lsn *Lsn `protobuf:"bytes,1,opt,name=lsn,proto3" json:"lsn,omitempty"`
}

func (x *FixLsnRsp) Reset() {
	*x = FixLsnRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_source_stream_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixLsnRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixLsnRsp) ProtoMessage() {}

func (x *FixLsnRsp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_source_stream_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixLsnRsp.ProtoReflect.Descriptor instead.
func (*FixLsnRsp) Descriptor() ([]byte, []int) {
	return file_api_v0_2_source_stream_proto_rawDescGZIP(), []int{7}
}

func (x *FixLsnRsp) GetLsn() *Lsn {
	if x != nil {
		return x.Lsn
	}
	return nil
}

// This message queries is LSN is still presented in the stream
type CheckLsnReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lsn *Lsn `protobuf:"bytes,1,opt,name=lsn,proto3" json:"lsn,omitempty"`
}

func (x *CheckLsnReq) Reset() {
	*x = CheckLsnReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_source_stream_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckLsnReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLsnReq) ProtoMessage() {}

func (x *CheckLsnReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_source_stream_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLsnReq.ProtoReflect.Descriptor instead.
func (*CheckLsnReq) Descriptor() ([]byte, []int) {
	return file_api_v0_2_source_stream_proto_rawDescGZIP(), []int{8}
}

func (x *CheckLsnReq) GetLsn() *Lsn {
	if x != nil {
		return x.Lsn
	}
	return nil
}

type CheckLsnRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alive bool `protobuf:"varint,1,opt,name=alive,proto3" json:"alive,omitempty"`
}

func (x *CheckLsnRsp) Reset() {
	*x = CheckLsnRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_source_stream_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckLsnRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLsnRsp) ProtoMessage() {}

func (x *CheckLsnRsp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_source_stream_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLsnRsp.ProtoReflect.Descriptor instead.
func (*CheckLsnRsp) Descriptor() ([]byte, []int) {
	return file_api_v0_2_source_stream_proto_rawDescGZIP(), []int{9}
}

func (x *CheckLsnRsp) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

// This message rewinds LSN (e.g. makes it no longer fixed to a certain point)
// note, that 'lsn_value' field of Lsn message is optional: client may not know what to reset after restart,
// but service should identify stream by other parameters provided by LSN message
type RewindLsnReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lsn *Lsn `protobuf:"bytes,1,opt,name=lsn,proto3" json:"lsn,omitempty"`
}

func (x *RewindLsnReq) Reset() {
	*x = RewindLsnReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_source_stream_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewindLsnReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewindLsnReq) ProtoMessage() {}

func (x *RewindLsnReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_source_stream_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewindLsnReq.ProtoReflect.Descriptor instead.
func (*RewindLsnReq) Descriptor() ([]byte, []int) {
	return file_api_v0_2_source_stream_proto_rawDescGZIP(), []int{10}
}

func (x *RewindLsnReq) GetLsn() *Lsn {
	if x != nil {
		return x.Lsn
	}
	return nil
}

type RewindLsnRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RewindLsnRsp) Reset() {
	*x = RewindLsnRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_source_stream_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewindLsnRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewindLsnRsp) ProtoMessage() {}

func (x *RewindLsnRsp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_source_stream_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewindLsnRsp.ProtoReflect.Descriptor instead.
func (*RewindLsnRsp) Descriptor() ([]byte, []int) {
	return file_api_v0_2_source_stream_proto_rawDescGZIP(), []int{11}
}

// End of stream message should advance cursor in order to retrieve new values,
// otherwise source may stuck sending the same values over and over again
type StreamChangeRsp_CheckPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lsn *Lsn `protobuf:"bytes,1,opt,name=lsn,proto3" json:"lsn,omitempty"`
	// Specify unix time of change commit if you have this information. You are able to ignore this data
	// Zero value interpreted as no info provided.
	UnixCommitTime uint64 `protobuf:"varint,2,opt,name=unix_commit_time,json=unixCommitTime,proto3" json:"unix_commit_time,omitempty"`
}

func (x *StreamChangeRsp_CheckPoint) Reset() {
	*x = StreamChangeRsp_CheckPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_source_stream_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChangeRsp_CheckPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChangeRsp_CheckPoint) ProtoMessage() {}

func (x *StreamChangeRsp_CheckPoint) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_source_stream_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChangeRsp_CheckPoint.ProtoReflect.Descriptor instead.
func (*StreamChangeRsp_CheckPoint) Descriptor() ([]byte, []int) {
	return file_api_v0_2_source_stream_proto_rawDescGZIP(), []int{3, 0}
}

func (x *StreamChangeRsp_CheckPoint) GetLsn() *Lsn {
	if x != nil {
		return x.Lsn
	}
	return nil
}

func (x *StreamChangeRsp_CheckPoint) GetUnixCommitTime() uint64 {
	if x != nil {
		return x.UnixCommitTime
	}
	return 0
}

// This message notifies user that requested next item that his LSN
// has been lost from the log.
type StreamChangeRsp_LostLsn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamChangeRsp_LostLsn) Reset() {
	*x = StreamChangeRsp_LostLsn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_source_stream_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChangeRsp_LostLsn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChangeRsp_LostLsn) ProtoMessage() {}

func (x *StreamChangeRsp_LostLsn) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_source_stream_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChangeRsp_LostLsn.ProtoReflect.Descriptor instead.
func (*StreamChangeRsp_LostLsn) Descriptor() ([]byte, []int) {
	return file_api_v0_2_source_stream_proto_rawDescGZIP(), []int{3, 1}
}

// this means it contains all namespaces -- all possible messages are replicated
type StreamSource_Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamSource_Cluster) Reset() {
	*x = StreamSource_Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_source_stream_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamSource_Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSource_Cluster) ProtoMessage() {}

func (x *StreamSource_Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_source_stream_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSource_Cluster.ProtoReflect.Descriptor instead.
func (*StreamSource_Cluster) Descriptor() ([]byte, []int) {
	return file_api_v0_2_source_stream_proto_rawDescGZIP(), []int{4, 0}
}

var File_api_v0_2_source_stream_proto protoreflect.FileDescriptor

var file_api_v0_2_source_stream_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x5f, 0x32, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x30,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x5f, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x5f,
	0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x04, 0x0a,
	0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x74, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x4f, 0x0a,
	0x08, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x5d,
	0x0a, 0x0b, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x73, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64,
	0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x78, 0x4c, 0x73, 0x6e, 0x52, 0x65, 0x71,
	0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x78, 0x4c, 0x73, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x63, 0x0a,
	0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6c, 0x73, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32,
	0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x73, 0x6e,
	0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x73, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x66, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x6c, 0x73, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x77, 0x69, 0x6e, 0x64, 0x4c, 0x73, 0x6e, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65,
	0x77, 0x69, 0x6e, 0x64, 0x4c, 0x73, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x6f, 0x0a, 0x11, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f,
	0x32, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x42, 0x09, 0x0a, 0x07, 0x63,
	0x74, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x22, 0x87, 0x04, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x74, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x5f,
	0x72, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x73, 0x70, 0x48, 0x00, 0x52,
	0x07, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x73, 0x6e, 0x5f, 0x72, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x46, 0x69, 0x78, 0x4c, 0x73, 0x6e, 0x52, 0x73, 0x70, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69,
	0x78, 0x4c, 0x73, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x63, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x6c, 0x73, 0x6e, 0x5f, 0x72, 0x73, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x73, 0x6e, 0x52, 0x73, 0x70, 0x48, 0x00, 0x52,
	0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x73, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x0e,
	0x72, 0x65, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x6c, 0x73, 0x6e, 0x5f, 0x72, 0x73, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32,
	0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x77, 0x69, 0x6e, 0x64, 0x4c, 0x73,
	0x6e, 0x52, 0x73, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x69, 0x6e, 0x64, 0x4c, 0x73,
	0x6e, 0x52, 0x73, 0x70, 0x12, 0x6f, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x73, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x73, 0x70, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x73, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x74, 0x6c, 0x5f, 0x72, 0x73, 0x70,
	0x22, 0x5a, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x47, 0x0a, 0x03, 0x6c, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x4c, 0x73, 0x6e, 0x52, 0x03, 0x6c, 0x73, 0x6e, 0x22, 0xe5, 0x03, 0x0a,
	0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x73, 0x70,
	0x12, 0x58, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f,
	0x32, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x6e, 0x0a, 0x0a, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x73,
	0x70, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x66, 0x0a, 0x08, 0x6c, 0x6f,
	0x73, 0x74, 0x5f, 0x6c, 0x73, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x73, 0x70, 0x2e,
	0x4c, 0x6f, 0x73, 0x74, 0x4c, 0x73, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x6f, 0x73, 0x74, 0x4c,
	0x73, 0x6e, 0x1a, 0x7f, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x47, 0x0a, 0x03, 0x6c, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x4c, 0x73, 0x6e, 0x52, 0x03, 0x6c, 0x73, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x6e, 0x69,
	0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0x09, 0x0a, 0x07, 0x4c, 0x6f, 0x73, 0x74, 0x4c, 0x73, 0x6e, 0x42, 0x14,
	0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x22, 0xa7, 0x02, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x54, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30,
	0x5f, 0x32, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x09, 0x0a, 0x07, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xec,
	0x01, 0x0a, 0x03, 0x4c, 0x73, 0x6e, 0x12, 0x63, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x09, 0x6c,
	0x73, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x73, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x70, 0x0a,
	0x09, 0x46, 0x69, 0x78, 0x4c, 0x73, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x63, 0x0a, 0x0d, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x54, 0x0a, 0x09, 0x46, 0x69, 0x78, 0x4c, 0x73, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x03,
	0x6c, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4c, 0x73, 0x6e,
	0x52, 0x03, 0x6c, 0x73, 0x6e, 0x22, 0x56, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x73,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x47, 0x0a, 0x03, 0x6c, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x4c, 0x73, 0x6e, 0x52, 0x03, 0x6c, 0x73, 0x6e, 0x22, 0x23, 0x0a,
	0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x73, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x22, 0x57, 0x0a, 0x0c, 0x52, 0x65, 0x77, 0x69, 0x6e, 0x64, 0x4c, 0x73, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x47, 0x0a, 0x03, 0x6c, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x4c, 0x73, 0x6e, 0x52, 0x03, 0x6c, 0x73, 0x6e, 0x22, 0x0e, 0x0a, 0x0c, 0x52,
	0x65, 0x77, 0x69, 0x6e, 0x64, 0x4c, 0x73, 0x6e, 0x52, 0x73, 0x70, 0x42, 0x2e, 0x5a, 0x2c, 0x6b,
	0x72, 0x79, 0x31, 0x32, 0x37, 0x2e, 0x72, 0x75, 0x2f, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x5f, 0x32, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_api_v0_2_source_stream_proto_rawDescOnce sync.Once
	file_api_v0_2_source_stream_proto_rawDescData = file_api_v0_2_source_stream_proto_rawDesc
)

func file_api_v0_2_source_stream_proto_rawDescGZIP() []byte {
	file_api_v0_2_source_stream_proto_rawDescOnce.Do(func() {
		file_api_v0_2_source_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v0_2_source_stream_proto_rawDescData)
	})
	return file_api_v0_2_source_stream_proto_rawDescData
}

var file_api_v0_2_source_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_api_v0_2_source_stream_proto_goTypes = []interface{}{
	(*StreamCtlReq)(nil),               // 0: yandexcloud.datatransfer.dtextension.v0_2.source.StreamCtlReq
	(*StreamCtlRsp)(nil),               // 1: yandexcloud.datatransfer.dtextension.v0_2.source.StreamCtlRsp
	(*StreamChangeReq)(nil),            // 2: yandexcloud.datatransfer.dtextension.v0_2.source.StreamChangeReq
	(*StreamChangeRsp)(nil),            // 3: yandexcloud.datatransfer.dtextension.v0_2.source.StreamChangeRsp
	(*StreamSource)(nil),               // 4: yandexcloud.datatransfer.dtextension.v0_2.source.StreamSource
	(*Lsn)(nil),                        // 5: yandexcloud.datatransfer.dtextension.v0_2.source.Lsn
	(*FixLsnReq)(nil),                  // 6: yandexcloud.datatransfer.dtextension.v0_2.source.FixLsnReq
	(*FixLsnRsp)(nil),                  // 7: yandexcloud.datatransfer.dtextension.v0_2.source.FixLsnRsp
	(*CheckLsnReq)(nil),                // 8: yandexcloud.datatransfer.dtextension.v0_2.source.CheckLsnReq
	(*CheckLsnRsp)(nil),                // 9: yandexcloud.datatransfer.dtextension.v0_2.source.CheckLsnRsp
	(*RewindLsnReq)(nil),               // 10: yandexcloud.datatransfer.dtextension.v0_2.source.RewindLsnReq
	(*RewindLsnRsp)(nil),               // 11: yandexcloud.datatransfer.dtextension.v0_2.source.RewindLsnRsp
	(*StreamChangeRsp_CheckPoint)(nil), // 12: yandexcloud.datatransfer.dtextension.v0_2.source.StreamChangeRsp.CheckPoint
	(*StreamChangeRsp_LostLsn)(nil),    // 13: yandexcloud.datatransfer.dtextension.v0_2.source.StreamChangeRsp.LostLsn
	(*StreamSource_Cluster)(nil),       // 14: yandexcloud.datatransfer.dtextension.v0_2.source.StreamSource.Cluster
	(*v0_2.InitReq)(nil),               // 15: yandexcloud.datatransfer.dtextension.v0_2.InitReq
	(*v0_2.InitRsp)(nil),               // 16: yandexcloud.datatransfer.dtextension.v0_2.InitRsp
	(*v0_2.ChangeItem)(nil),            // 17: yandexcloud.datatransfer.dtextension.v0_2.ChangeItem
	(*v0_2.Table)(nil),                 // 18: yandexcloud.datatransfer.dtextension.v0_2.Table
	(*v0_2.Namespace)(nil),             // 19: yandexcloud.datatransfer.dtextension.v0_2.Namespace
	(*v0_2.ColumnValue)(nil),           // 20: yandexcloud.datatransfer.dtextension.v0_2.ColumnValue
}
var file_api_v0_2_source_stream_proto_depIdxs = []int32{
	15, // 0: yandexcloud.datatransfer.dtextension.v0_2.source.StreamCtlReq.init_req:type_name -> yandexcloud.datatransfer.dtextension.v0_2.InitReq
	6,  // 1: yandexcloud.datatransfer.dtextension.v0_2.source.StreamCtlReq.fix_lsn_req:type_name -> yandexcloud.datatransfer.dtextension.v0_2.source.FixLsnReq
	8,  // 2: yandexcloud.datatransfer.dtextension.v0_2.source.StreamCtlReq.check_lsn_req:type_name -> yandexcloud.datatransfer.dtextension.v0_2.source.CheckLsnReq
	10, // 3: yandexcloud.datatransfer.dtextension.v0_2.source.StreamCtlReq.rewind_lsn_req:type_name -> yandexcloud.datatransfer.dtextension.v0_2.source.RewindLsnReq
	2,  // 4: yandexcloud.datatransfer.dtextension.v0_2.source.StreamCtlReq.stream_change_req:type_name -> yandexcloud.datatransfer.dtextension.v0_2.source.StreamChangeReq
	16, // 5: yandexcloud.datatransfer.dtextension.v0_2.source.StreamCtlRsp.init_rsp:type_name -> yandexcloud.datatransfer.dtextension.v0_2.InitRsp
	7,  // 6: yandexcloud.datatransfer.dtextension.v0_2.source.StreamCtlRsp.fix_lsn_rsp:type_name -> yandexcloud.datatransfer.dtextension.v0_2.source.FixLsnRsp
	9,  // 7: yandexcloud.datatransfer.dtextension.v0_2.source.StreamCtlRsp.check_lsn_rsp:type_name -> yandexcloud.datatransfer.dtextension.v0_2.source.CheckLsnRsp
	11, // 8: yandexcloud.datatransfer.dtextension.v0_2.source.StreamCtlRsp.rewind_lsn_rsp:type_name -> yandexcloud.datatransfer.dtextension.v0_2.source.RewindLsnRsp
	3,  // 9: yandexcloud.datatransfer.dtextension.v0_2.source.StreamCtlRsp.stream_change_rsp:type_name -> yandexcloud.datatransfer.dtextension.v0_2.source.StreamChangeRsp
	5,  // 10: yandexcloud.datatransfer.dtextension.v0_2.source.StreamChangeReq.lsn:type_name -> yandexcloud.datatransfer.dtextension.v0_2.source.Lsn
	17, // 11: yandexcloud.datatransfer.dtextension.v0_2.source.StreamChangeRsp.change_item:type_name -> yandexcloud.datatransfer.dtextension.v0_2.ChangeItem
	12, // 12: yandexcloud.datatransfer.dtextension.v0_2.source.StreamChangeRsp.checkpoint:type_name -> yandexcloud.datatransfer.dtextension.v0_2.source.StreamChangeRsp.CheckPoint
	13, // 13: yandexcloud.datatransfer.dtextension.v0_2.source.StreamChangeRsp.lost_lsn:type_name -> yandexcloud.datatransfer.dtextension.v0_2.source.StreamChangeRsp.LostLsn
	18, // 14: yandexcloud.datatransfer.dtextension.v0_2.source.StreamSource.table:type_name -> yandexcloud.datatransfer.dtextension.v0_2.Table
	19, // 15: yandexcloud.datatransfer.dtextension.v0_2.source.StreamSource.namespace:type_name -> yandexcloud.datatransfer.dtextension.v0_2.Namespace
	14, // 16: yandexcloud.datatransfer.dtextension.v0_2.source.StreamSource.cluster:type_name -> yandexcloud.datatransfer.dtextension.v0_2.source.StreamSource.Cluster
	4,  // 17: yandexcloud.datatransfer.dtextension.v0_2.source.Lsn.stream_source:type_name -> yandexcloud.datatransfer.dtextension.v0_2.source.StreamSource
	20, // 18: yandexcloud.datatransfer.dtextension.v0_2.source.Lsn.lsn_value:type_name -> yandexcloud.datatransfer.dtextension.v0_2.ColumnValue
	4,  // 19: yandexcloud.datatransfer.dtextension.v0_2.source.FixLsnReq.stream_source:type_name -> yandexcloud.datatransfer.dtextension.v0_2.source.StreamSource
	5,  // 20: yandexcloud.datatransfer.dtextension.v0_2.source.FixLsnRsp.lsn:type_name -> yandexcloud.datatransfer.dtextension.v0_2.source.Lsn
	5,  // 21: yandexcloud.datatransfer.dtextension.v0_2.source.CheckLsnReq.lsn:type_name -> yandexcloud.datatransfer.dtextension.v0_2.source.Lsn
	5,  // 22: yandexcloud.datatransfer.dtextension.v0_2.source.RewindLsnReq.lsn:type_name -> yandexcloud.datatransfer.dtextension.v0_2.source.Lsn
	5,  // 23: yandexcloud.datatransfer.dtextension.v0_2.source.StreamChangeRsp.CheckPoint.lsn:type_name -> yandexcloud.datatransfer.dtextension.v0_2.source.Lsn
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_api_v0_2_source_stream_proto_init() }
func file_api_v0_2_source_stream_proto_init() {
	if File_api_v0_2_source_stream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v0_2_source_stream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamCtlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_source_stream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamCtlRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_source_stream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamChangeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_source_stream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamChangeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_source_stream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_source_stream_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lsn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_source_stream_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixLsnReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_source_stream_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixLsnRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_source_stream_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckLsnReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_source_stream_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckLsnRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_source_stream_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewindLsnReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_source_stream_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewindLsnRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_source_stream_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamChangeRsp_CheckPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_source_stream_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamChangeRsp_LostLsn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_source_stream_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamSource_Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v0_2_source_stream_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*StreamCtlReq_InitReq)(nil),
		(*StreamCtlReq_FixLsnReq)(nil),
		(*StreamCtlReq_CheckLsnReq)(nil),
		(*StreamCtlReq_RewindLsnReq)(nil),
		(*StreamCtlReq_StreamChangeReq)(nil),
	}
	file_api_v0_2_source_stream_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*StreamCtlRsp_InitRsp)(nil),
		(*StreamCtlRsp_FixLsnRsp)(nil),
		(*StreamCtlRsp_CheckLsnRsp)(nil),
		(*StreamCtlRsp_RewindLsnRsp)(nil),
		(*StreamCtlRsp_StreamChangeRsp)(nil),
	}
	file_api_v0_2_source_stream_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*StreamChangeRsp_ChangeItem)(nil),
		(*StreamChangeRsp_Checkpoint)(nil),
		(*StreamChangeRsp_LostLsn_)(nil),
	}
	file_api_v0_2_source_stream_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*StreamSource_Table)(nil),
		(*StreamSource_Namespace)(nil),
		(*StreamSource_Cluster_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v0_2_source_stream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v0_2_source_stream_proto_goTypes,
		DependencyIndexes: file_api_v0_2_source_stream_proto_depIdxs,
		MessageInfos:      file_api_v0_2_source_stream_proto_msgTypes,
	}.Build()
	File_api_v0_2_source_stream_proto = out.File
	file_api_v0_2_source_stream_proto_rawDesc = nil
	file_api_v0_2_source_stream_proto_goTypes = nil
	file_api_v0_2_source_stream_proto_depIdxs = nil
}
