// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sink

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	v0_2 "kry127.ru/dtextension/go/pkg/api/v0_2"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SinkServiceClient is the client API for SinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SinkServiceClient interface {
	// Spec is method for determining endpoint settings available for configuring
	Spec(ctx context.Context, in *v0_2.SpecReq, opts ...grpc.CallOption) (*v0_2.SpecRsp, error)
	// Check is method that checks settings of endpoint are comply to specification
	// In order to see specification see Spec handle
	Check(ctx context.Context, in *v0_2.CheckReq, opts ...grpc.CallOption) (*v0_2.CheckRsp, error)
	Write(ctx context.Context, opts ...grpc.CallOption) (SinkService_WriteClient, error)
}

type sinkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSinkServiceClient(cc grpc.ClientConnInterface) SinkServiceClient {
	return &sinkServiceClient{cc}
}

func (c *sinkServiceClient) Spec(ctx context.Context, in *v0_2.SpecReq, opts ...grpc.CallOption) (*v0_2.SpecRsp, error) {
	out := new(v0_2.SpecRsp)
	err := c.cc.Invoke(ctx, "/yandexcloud.datatransfer.dtextension.v0_2.sink.SinkService/Spec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinkServiceClient) Check(ctx context.Context, in *v0_2.CheckReq, opts ...grpc.CallOption) (*v0_2.CheckRsp, error) {
	out := new(v0_2.CheckRsp)
	err := c.cc.Invoke(ctx, "/yandexcloud.datatransfer.dtextension.v0_2.sink.SinkService/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinkServiceClient) Write(ctx context.Context, opts ...grpc.CallOption) (SinkService_WriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SinkService_serviceDesc.Streams[0], "/yandexcloud.datatransfer.dtextension.v0_2.sink.SinkService/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &sinkServiceWriteClient{stream}
	return x, nil
}

type SinkService_WriteClient interface {
	Send(*WriteReq) error
	Recv() (*WriteRsp, error)
	grpc.ClientStream
}

type sinkServiceWriteClient struct {
	grpc.ClientStream
}

func (x *sinkServiceWriteClient) Send(m *WriteReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sinkServiceWriteClient) Recv() (*WriteRsp, error) {
	m := new(WriteRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SinkServiceServer is the server API for SinkService service.
// All implementations must embed UnimplementedSinkServiceServer
// for forward compatibility
type SinkServiceServer interface {
	// Spec is method for determining endpoint settings available for configuring
	Spec(context.Context, *v0_2.SpecReq) (*v0_2.SpecRsp, error)
	// Check is method that checks settings of endpoint are comply to specification
	// In order to see specification see Spec handle
	Check(context.Context, *v0_2.CheckReq) (*v0_2.CheckRsp, error)
	Write(SinkService_WriteServer) error
	mustEmbedUnimplementedSinkServiceServer()
}

// UnimplementedSinkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSinkServiceServer struct {
}

func (*UnimplementedSinkServiceServer) Spec(context.Context, *v0_2.SpecReq) (*v0_2.SpecRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Spec not implemented")
}
func (*UnimplementedSinkServiceServer) Check(context.Context, *v0_2.CheckReq) (*v0_2.CheckRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (*UnimplementedSinkServiceServer) Write(SinkService_WriteServer) error {
	return status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (*UnimplementedSinkServiceServer) mustEmbedUnimplementedSinkServiceServer() {}

func RegisterSinkServiceServer(s *grpc.Server, srv SinkServiceServer) {
	s.RegisterService(&_SinkService_serviceDesc, srv)
}

func _SinkService_Spec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0_2.SpecReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinkServiceServer).Spec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandexcloud.datatransfer.dtextension.v0_2.sink.SinkService/Spec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinkServiceServer).Spec(ctx, req.(*v0_2.SpecReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinkService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0_2.CheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinkServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandexcloud.datatransfer.dtextension.v0_2.sink.SinkService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinkServiceServer).Check(ctx, req.(*v0_2.CheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinkService_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SinkServiceServer).Write(&sinkServiceWriteServer{stream})
}

type SinkService_WriteServer interface {
	Send(*WriteRsp) error
	Recv() (*WriteReq, error)
	grpc.ServerStream
}

type sinkServiceWriteServer struct {
	grpc.ServerStream
}

func (x *sinkServiceWriteServer) Send(m *WriteRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sinkServiceWriteServer) Recv() (*WriteReq, error) {
	m := new(WriteReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SinkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yandexcloud.datatransfer.dtextension.v0_2.sink.SinkService",
	HandlerType: (*SinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Spec",
			Handler:    _SinkService_Spec_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _SinkService_Check_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Write",
			Handler:       _SinkService_Write_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/v0_2/sink/sink_service.proto",
}
