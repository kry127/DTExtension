// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: api/v0_2/data.proto

package v0_2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OpType int32

const (
	OpType_OP_TYPE_UNSPECIFIED OpType = 0
	OpType_OP_TYPE_INSERT      OpType = 1
	OpType_OP_TYPE_UPDATE      OpType = 2
	OpType_OP_TYPE_DELETE      OpType = 3
)

// Enum value maps for OpType.
var (
	OpType_name = map[int32]string{
		0: "OP_TYPE_UNSPECIFIED",
		1: "OP_TYPE_INSERT",
		2: "OP_TYPE_UPDATE",
		3: "OP_TYPE_DELETE",
	}
	OpType_value = map[string]int32{
		"OP_TYPE_UNSPECIFIED": 0,
		"OP_TYPE_INSERT":      1,
		"OP_TYPE_UPDATE":      2,
		"OP_TYPE_DELETE":      3,
	}
)

func (x OpType) Enum() *OpType {
	p := new(OpType)
	*p = x
	return p
}

func (x OpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v0_2_data_proto_enumTypes[0].Descriptor()
}

func (OpType) Type() protoreflect.EnumType {
	return &file_api_v0_2_data_proto_enumTypes[0]
}

func (x OpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpType.Descriptor instead.
func (OpType) EnumDescriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{0}
}

type ColumnType int32

const (
	ColumnType_COLUMN_TYPE_UNSPECIFIED ColumnType = 0
	ColumnType_COLUMN_TYPE_BOOL        ColumnType = 1
	ColumnType_COLUMN_TYPE_INT32       ColumnType = 2
	ColumnType_COLUMN_TYPE_INT64       ColumnType = 3
	ColumnType_COLUMN_TYPE_UINT32      ColumnType = 4
	ColumnType_COLUMN_TYPE_UINT64      ColumnType = 5
	ColumnType_COLUMN_TYPE_FLOAT       ColumnType = 6
	ColumnType_COLUMN_TYPE_DOUBLE      ColumnType = 7
	ColumnType_COLUMN_TYPE_JSON        ColumnType = 8
	ColumnType_COLUMN_TYPE_DECIMAL     ColumnType = 9
	ColumnType_COLUMN_TYPE_BIG_DECIMAL ColumnType = 10
	ColumnType_COLUMN_TYPE_BIG_INTEGER ColumnType = 11
	ColumnType_COLUMN_TYPE_UNIX_TIME   ColumnType = 12
	ColumnType_COLUMN_TYPE_STRING      ColumnType = 13
	ColumnType_COLUMN_TYPE_BINARY      ColumnType = 14
)

// Enum value maps for ColumnType.
var (
	ColumnType_name = map[int32]string{
		0:  "COLUMN_TYPE_UNSPECIFIED",
		1:  "COLUMN_TYPE_BOOL",
		2:  "COLUMN_TYPE_INT32",
		3:  "COLUMN_TYPE_INT64",
		4:  "COLUMN_TYPE_UINT32",
		5:  "COLUMN_TYPE_UINT64",
		6:  "COLUMN_TYPE_FLOAT",
		7:  "COLUMN_TYPE_DOUBLE",
		8:  "COLUMN_TYPE_JSON",
		9:  "COLUMN_TYPE_DECIMAL",
		10: "COLUMN_TYPE_BIG_DECIMAL",
		11: "COLUMN_TYPE_BIG_INTEGER",
		12: "COLUMN_TYPE_UNIX_TIME",
		13: "COLUMN_TYPE_STRING",
		14: "COLUMN_TYPE_BINARY",
	}
	ColumnType_value = map[string]int32{
		"COLUMN_TYPE_UNSPECIFIED": 0,
		"COLUMN_TYPE_BOOL":        1,
		"COLUMN_TYPE_INT32":       2,
		"COLUMN_TYPE_INT64":       3,
		"COLUMN_TYPE_UINT32":      4,
		"COLUMN_TYPE_UINT64":      5,
		"COLUMN_TYPE_FLOAT":       6,
		"COLUMN_TYPE_DOUBLE":      7,
		"COLUMN_TYPE_JSON":        8,
		"COLUMN_TYPE_DECIMAL":     9,
		"COLUMN_TYPE_BIG_DECIMAL": 10,
		"COLUMN_TYPE_BIG_INTEGER": 11,
		"COLUMN_TYPE_UNIX_TIME":   12,
		"COLUMN_TYPE_STRING":      13,
		"COLUMN_TYPE_BINARY":      14,
	}
)

func (x ColumnType) Enum() *ColumnType {
	p := new(ColumnType)
	*p = x
	return p
}

func (x ColumnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v0_2_data_proto_enumTypes[1].Descriptor()
}

func (ColumnType) Type() protoreflect.EnumType {
	return &file_api_v0_2_data_proto_enumTypes[1]
}

func (x ColumnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColumnType.Descriptor instead.
func (ColumnType) EnumDescriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{1}
}

type Namespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *Namespace) Reset() {
	*x = Namespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace) ProtoMessage() {}

func (x *Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace.ProtoReflect.Descriptor instead.
func (*Namespace) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{0}
}

func (x *Namespace) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace *Namespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Schema    *Schema    `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *Table) Reset() {
	*x = Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{1}
}

func (x *Table) GetNamespace() *Namespace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *Table) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Table) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []*Column `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{2}
}

func (x *Schema) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Key          bool                 `protobuf:"varint,2,opt,name=key,proto3" json:"key,omitempty"`
	Type         ColumnType           `protobuf:"varint,3,opt,name=type,proto3,enum=yandexcloud.datatransfer.dtextension.v0_2.ColumnType" json:"type,omitempty"`
	OriginalType *Column_OriginalType `protobuf:"bytes,4,opt,name=original_type,json=originalType,proto3,oneof" json:"original_type,omitempty"`
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{3}
}

func (x *Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Column) GetKey() bool {
	if x != nil {
		return x.Key
	}
	return false
}

func (x *Column) GetType() ColumnType {
	if x != nil {
		return x.Type
	}
	return ColumnType_COLUMN_TYPE_UNSPECIFIED
}

func (x *Column) GetOriginalType() *Column_OriginalType {
	if x != nil {
		return x.OriginalType
	}
	return nil
}

type ChangeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ChangeItem:
	//	*ChangeItem_DataChangeItem
	//	*ChangeItem_HomoChangeItem
	ChangeItem isChangeItem_ChangeItem `protobuf_oneof:"change_item"`
}

func (x *ChangeItem) Reset() {
	*x = ChangeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeItem) ProtoMessage() {}

func (x *ChangeItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeItem.ProtoReflect.Descriptor instead.
func (*ChangeItem) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{4}
}

func (m *ChangeItem) GetChangeItem() isChangeItem_ChangeItem {
	if m != nil {
		return m.ChangeItem
	}
	return nil
}

func (x *ChangeItem) GetDataChangeItem() *DataChangeItem {
	if x, ok := x.GetChangeItem().(*ChangeItem_DataChangeItem); ok {
		return x.DataChangeItem
	}
	return nil
}

func (x *ChangeItem) GetHomoChangeItem() *HomoChangeItem {
	if x, ok := x.GetChangeItem().(*ChangeItem_HomoChangeItem); ok {
		return x.HomoChangeItem
	}
	return nil
}

type isChangeItem_ChangeItem interface {
	isChangeItem_ChangeItem()
}

type ChangeItem_DataChangeItem struct {
	DataChangeItem *DataChangeItem `protobuf:"bytes,1,opt,name=data_change_item,json=dataChangeItem,proto3,oneof"`
}

type ChangeItem_HomoChangeItem struct {
	HomoChangeItem *HomoChangeItem `protobuf:"bytes,2,opt,name=homo_change_item,json=homoChangeItem,proto3,oneof"`
}

func (*ChangeItem_DataChangeItem) isChangeItem_ChangeItem() {}

func (*ChangeItem_HomoChangeItem) isChangeItem_ChangeItem() {}

// this item is specific to concrete pair source-destination, so use of
// this message is discouraged. However it can make more precise
// transfer in homo case. For example, you can use it for DDL transfer
type HomoChangeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectorId string `protobuf:"bytes,1,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"`
	ChangeItem  []byte `protobuf:"bytes,2,opt,name=change_item,json=changeItem,proto3" json:"change_item,omitempty"`
}

func (x *HomoChangeItem) Reset() {
	*x = HomoChangeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomoChangeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomoChangeItem) ProtoMessage() {}

func (x *HomoChangeItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomoChangeItem.ProtoReflect.Descriptor instead.
func (*HomoChangeItem) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{5}
}

func (x *HomoChangeItem) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

func (x *HomoChangeItem) GetChangeItem() []byte {
	if x != nil {
		return x.ChangeItem
	}
	return nil
}

type DataChangeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpType OpType `protobuf:"varint,1,opt,name=op_type,json=opType,proto3,enum=yandexcloud.datatransfer.dtextension.v0_2.OpType" json:"op_type,omitempty"`
	Table  *Table `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	// Types that are assignable to Format:
	//	*DataChangeItem_PlainRow
	//	*DataChangeItem_Parquet
	Format isDataChangeItem_Format `protobuf_oneof:"format"`
}

func (x *DataChangeItem) Reset() {
	*x = DataChangeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataChangeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataChangeItem) ProtoMessage() {}

func (x *DataChangeItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataChangeItem.ProtoReflect.Descriptor instead.
func (*DataChangeItem) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{6}
}

func (x *DataChangeItem) GetOpType() OpType {
	if x != nil {
		return x.OpType
	}
	return OpType_OP_TYPE_UNSPECIFIED
}

func (x *DataChangeItem) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

func (m *DataChangeItem) GetFormat() isDataChangeItem_Format {
	if m != nil {
		return m.Format
	}
	return nil
}

func (x *DataChangeItem) GetPlainRow() *PlainRow {
	if x, ok := x.GetFormat().(*DataChangeItem_PlainRow); ok {
		return x.PlainRow
	}
	return nil
}

func (x *DataChangeItem) GetParquet() *Parquet {
	if x, ok := x.GetFormat().(*DataChangeItem_Parquet); ok {
		return x.Parquet
	}
	return nil
}

type isDataChangeItem_Format interface {
	isDataChangeItem_Format()
}

type DataChangeItem_PlainRow struct {
	PlainRow *PlainRow `protobuf:"bytes,11,opt,name=plain_row,json=plainRow,proto3,oneof"`
}

type DataChangeItem_Parquet struct {
	Parquet *Parquet `protobuf:"bytes,12,opt,name=parquet,proto3,oneof"`
}

func (*DataChangeItem_PlainRow) isDataChangeItem_Format() {}

func (*DataChangeItem_Parquet) isDataChangeItem_Format() {}

// the change item in form of plain row
type PlainRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*ColumnValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *PlainRow) Reset() {
	*x = PlainRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlainRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlainRow) ProtoMessage() {}

func (x *PlainRow) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlainRow.ProtoReflect.Descriptor instead.
func (*PlainRow) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{7}
}

func (x *PlainRow) GetValues() []*ColumnValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// the change item in parquet format
// that means that multiple change items are packed in column-oriented way
type Parquet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParquetValues []*ParquetValue `protobuf:"bytes,1,rep,name=parquet_values,json=parquetValues,proto3" json:"parquet_values,omitempty"`
}

func (x *Parquet) Reset() {
	*x = Parquet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parquet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parquet) ProtoMessage() {}

func (x *Parquet) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parquet.ProtoReflect.Descriptor instead.
func (*Parquet) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{8}
}

func (x *Parquet) GetParquetValues() []*ParquetValue {
	if x != nil {
		return x.ParquetValues
	}
	return nil
}

type Decimal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsString  string `protobuf:"bytes,1,opt,name=as_string,json=asString,proto3" json:"as_string,omitempty"`
	Precision uint32 `protobuf:"varint,2,opt,name=precision,proto3" json:"precision,omitempty"`
	Scale     uint32 `protobuf:"varint,3,opt,name=scale,proto3" json:"scale,omitempty"`
}

func (x *Decimal) Reset() {
	*x = Decimal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decimal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decimal) ProtoMessage() {}

func (x *Decimal) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decimal.ProtoReflect.Descriptor instead.
func (*Decimal) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{9}
}

func (x *Decimal) GetAsString() string {
	if x != nil {
		return x.AsString
	}
	return ""
}

func (x *Decimal) GetPrecision() uint32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

func (x *Decimal) GetScale() uint32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

type ColumnValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*ColumnValue_Bool
	//	*ColumnValue_Int32
	//	*ColumnValue_Int64
	//	*ColumnValue_Uint32
	//	*ColumnValue_Uint64
	//	*ColumnValue_Float
	//	*ColumnValue_Double
	//	*ColumnValue_Json
	//	*ColumnValue_Decimal
	//	*ColumnValue_BigDecimal
	//	*ColumnValue_BigInteger
	//	*ColumnValue_UnixTime
	//	*ColumnValue_String_
	//	*ColumnValue_Binary
	Data isColumnValue_Data `protobuf_oneof:"data"`
}

func (x *ColumnValue) Reset() {
	*x = ColumnValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnValue) ProtoMessage() {}

func (x *ColumnValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnValue.ProtoReflect.Descriptor instead.
func (*ColumnValue) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{10}
}

func (m *ColumnValue) GetData() isColumnValue_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *ColumnValue) GetBool() bool {
	if x, ok := x.GetData().(*ColumnValue_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *ColumnValue) GetInt32() int32 {
	if x, ok := x.GetData().(*ColumnValue_Int32); ok {
		return x.Int32
	}
	return 0
}

func (x *ColumnValue) GetInt64() int64 {
	if x, ok := x.GetData().(*ColumnValue_Int64); ok {
		return x.Int64
	}
	return 0
}

func (x *ColumnValue) GetUint32() uint32 {
	if x, ok := x.GetData().(*ColumnValue_Uint32); ok {
		return x.Uint32
	}
	return 0
}

func (x *ColumnValue) GetUint64() uint64 {
	if x, ok := x.GetData().(*ColumnValue_Uint64); ok {
		return x.Uint64
	}
	return 0
}

func (x *ColumnValue) GetFloat() float32 {
	if x, ok := x.GetData().(*ColumnValue_Float); ok {
		return x.Float
	}
	return 0
}

func (x *ColumnValue) GetDouble() float64 {
	if x, ok := x.GetData().(*ColumnValue_Double); ok {
		return x.Double
	}
	return 0
}

func (x *ColumnValue) GetJson() string {
	if x, ok := x.GetData().(*ColumnValue_Json); ok {
		return x.Json
	}
	return ""
}

func (x *ColumnValue) GetDecimal() *Decimal {
	if x, ok := x.GetData().(*ColumnValue_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ColumnValue) GetBigDecimal() string {
	if x, ok := x.GetData().(*ColumnValue_BigDecimal); ok {
		return x.BigDecimal
	}
	return ""
}

func (x *ColumnValue) GetBigInteger() string {
	if x, ok := x.GetData().(*ColumnValue_BigInteger); ok {
		return x.BigInteger
	}
	return ""
}

func (x *ColumnValue) GetUnixTime() int64 {
	if x, ok := x.GetData().(*ColumnValue_UnixTime); ok {
		return x.UnixTime
	}
	return 0
}

func (x *ColumnValue) GetString_() string {
	if x, ok := x.GetData().(*ColumnValue_String_); ok {
		return x.String_
	}
	return ""
}

func (x *ColumnValue) GetBinary() []byte {
	if x, ok := x.GetData().(*ColumnValue_Binary); ok {
		return x.Binary
	}
	return nil
}

type isColumnValue_Data interface {
	isColumnValue_Data()
}

type ColumnValue_Bool struct {
	Bool bool `protobuf:"varint,1,opt,name=bool,proto3,oneof"`
}

type ColumnValue_Int32 struct {
	Int32 int32 `protobuf:"varint,2,opt,name=int32,proto3,oneof"`
}

type ColumnValue_Int64 struct {
	Int64 int64 `protobuf:"varint,3,opt,name=int64,proto3,oneof"`
}

type ColumnValue_Uint32 struct {
	Uint32 uint32 `protobuf:"varint,4,opt,name=uint32,proto3,oneof"`
}

type ColumnValue_Uint64 struct {
	Uint64 uint64 `protobuf:"varint,5,opt,name=uint64,proto3,oneof"`
}

type ColumnValue_Float struct {
	Float float32 `protobuf:"fixed32,6,opt,name=float,proto3,oneof"`
}

type ColumnValue_Double struct {
	Double float64 `protobuf:"fixed64,7,opt,name=double,proto3,oneof"`
}

type ColumnValue_Json struct {
	Json string `protobuf:"bytes,8,opt,name=json,proto3,oneof"`
}

type ColumnValue_Decimal struct {
	Decimal *Decimal `protobuf:"bytes,9,opt,name=decimal,proto3,oneof"`
}

type ColumnValue_BigDecimal struct {
	BigDecimal string `protobuf:"bytes,10,opt,name=big_decimal,json=bigDecimal,proto3,oneof"`
}

type ColumnValue_BigInteger struct {
	BigInteger string `protobuf:"bytes,11,opt,name=big_integer,json=bigInteger,proto3,oneof"`
}

type ColumnValue_UnixTime struct {
	UnixTime int64 `protobuf:"varint,12,opt,name=unix_time,json=unixTime,proto3,oneof"`
}

type ColumnValue_String_ struct {
	String_ string `protobuf:"bytes,13,opt,name=string,proto3,oneof"`
}

type ColumnValue_Binary struct {
	Binary []byte `protobuf:"bytes,14,opt,name=binary,proto3,oneof"`
}

func (*ColumnValue_Bool) isColumnValue_Data() {}

func (*ColumnValue_Int32) isColumnValue_Data() {}

func (*ColumnValue_Int64) isColumnValue_Data() {}

func (*ColumnValue_Uint32) isColumnValue_Data() {}

func (*ColumnValue_Uint64) isColumnValue_Data() {}

func (*ColumnValue_Float) isColumnValue_Data() {}

func (*ColumnValue_Double) isColumnValue_Data() {}

func (*ColumnValue_Json) isColumnValue_Data() {}

func (*ColumnValue_Decimal) isColumnValue_Data() {}

func (*ColumnValue_BigDecimal) isColumnValue_Data() {}

func (*ColumnValue_BigInteger) isColumnValue_Data() {}

func (*ColumnValue_UnixTime) isColumnValue_Data() {}

func (*ColumnValue_String_) isColumnValue_Data() {}

func (*ColumnValue_Binary) isColumnValue_Data() {}

type ParquetValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*ParquetValue_Bool
	//	*ParquetValue_Int32
	//	*ParquetValue_Int64
	//	*ParquetValue_Uint32
	//	*ParquetValue_Uint64
	//	*ParquetValue_Float
	//	*ParquetValue_Double
	//	*ParquetValue_Json
	//	*ParquetValue_Decimal
	//	*ParquetValue_BigDecimal
	//	*ParquetValue_BigInteger
	//	*ParquetValue_UnixTime
	//	*ParquetValue_String_
	//	*ParquetValue_Binary
	Data isParquetValue_Data `protobuf_oneof:"data"`
}

func (x *ParquetValue) Reset() {
	*x = ParquetValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParquetValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetValue) ProtoMessage() {}

func (x *ParquetValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetValue.ProtoReflect.Descriptor instead.
func (*ParquetValue) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{11}
}

func (m *ParquetValue) GetData() isParquetValue_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *ParquetValue) GetBool() *ParquetValue_ParquetBool {
	if x, ok := x.GetData().(*ParquetValue_Bool); ok {
		return x.Bool
	}
	return nil
}

func (x *ParquetValue) GetInt32() *ParquetValue_ParquetInt32 {
	if x, ok := x.GetData().(*ParquetValue_Int32); ok {
		return x.Int32
	}
	return nil
}

func (x *ParquetValue) GetInt64() *ParquetValue_ParquetInt64 {
	if x, ok := x.GetData().(*ParquetValue_Int64); ok {
		return x.Int64
	}
	return nil
}

func (x *ParquetValue) GetUint32() *ParquetValue_ParquetUInt32 {
	if x, ok := x.GetData().(*ParquetValue_Uint32); ok {
		return x.Uint32
	}
	return nil
}

func (x *ParquetValue) GetUint64() *ParquetValue_ParquetUInt64 {
	if x, ok := x.GetData().(*ParquetValue_Uint64); ok {
		return x.Uint64
	}
	return nil
}

func (x *ParquetValue) GetFloat() *ParquetValue_ParquetFloat {
	if x, ok := x.GetData().(*ParquetValue_Float); ok {
		return x.Float
	}
	return nil
}

func (x *ParquetValue) GetDouble() *ParquetValue_ParquetDouble {
	if x, ok := x.GetData().(*ParquetValue_Double); ok {
		return x.Double
	}
	return nil
}

func (x *ParquetValue) GetJson() *ParquetValue_ParquetString {
	if x, ok := x.GetData().(*ParquetValue_Json); ok {
		return x.Json
	}
	return nil
}

func (x *ParquetValue) GetDecimal() *ParquetValue_ParquetDecimal {
	if x, ok := x.GetData().(*ParquetValue_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ParquetValue) GetBigDecimal() *ParquetValue_ParquetString {
	if x, ok := x.GetData().(*ParquetValue_BigDecimal); ok {
		return x.BigDecimal
	}
	return nil
}

func (x *ParquetValue) GetBigInteger() *ParquetValue_ParquetString {
	if x, ok := x.GetData().(*ParquetValue_BigInteger); ok {
		return x.BigInteger
	}
	return nil
}

func (x *ParquetValue) GetUnixTime() *ParquetValue_ParquetInt64 {
	if x, ok := x.GetData().(*ParquetValue_UnixTime); ok {
		return x.UnixTime
	}
	return nil
}

func (x *ParquetValue) GetString_() *ParquetValue_ParquetString {
	if x, ok := x.GetData().(*ParquetValue_String_); ok {
		return x.String_
	}
	return nil
}

func (x *ParquetValue) GetBinary() *ParquetValue_ParquetBytes {
	if x, ok := x.GetData().(*ParquetValue_Binary); ok {
		return x.Binary
	}
	return nil
}

type isParquetValue_Data interface {
	isParquetValue_Data()
}

type ParquetValue_Bool struct {
	Bool *ParquetValue_ParquetBool `protobuf:"bytes,1,opt,name=bool,proto3,oneof"`
}

type ParquetValue_Int32 struct {
	Int32 *ParquetValue_ParquetInt32 `protobuf:"bytes,2,opt,name=int32,proto3,oneof"`
}

type ParquetValue_Int64 struct {
	Int64 *ParquetValue_ParquetInt64 `protobuf:"bytes,3,opt,name=int64,proto3,oneof"`
}

type ParquetValue_Uint32 struct {
	Uint32 *ParquetValue_ParquetUInt32 `protobuf:"bytes,4,opt,name=uint32,proto3,oneof"`
}

type ParquetValue_Uint64 struct {
	Uint64 *ParquetValue_ParquetUInt64 `protobuf:"bytes,5,opt,name=uint64,proto3,oneof"`
}

type ParquetValue_Float struct {
	Float *ParquetValue_ParquetFloat `protobuf:"bytes,6,opt,name=float,proto3,oneof"`
}

type ParquetValue_Double struct {
	Double *ParquetValue_ParquetDouble `protobuf:"bytes,7,opt,name=double,proto3,oneof"`
}

type ParquetValue_Json struct {
	Json *ParquetValue_ParquetString `protobuf:"bytes,8,opt,name=json,proto3,oneof"`
}

type ParquetValue_Decimal struct {
	Decimal *ParquetValue_ParquetDecimal `protobuf:"bytes,9,opt,name=decimal,proto3,oneof"`
}

type ParquetValue_BigDecimal struct {
	BigDecimal *ParquetValue_ParquetString `protobuf:"bytes,10,opt,name=big_decimal,json=bigDecimal,proto3,oneof"`
}

type ParquetValue_BigInteger struct {
	BigInteger *ParquetValue_ParquetString `protobuf:"bytes,11,opt,name=big_integer,json=bigInteger,proto3,oneof"`
}

type ParquetValue_UnixTime struct {
	UnixTime *ParquetValue_ParquetInt64 `protobuf:"bytes,12,opt,name=unix_time,json=unixTime,proto3,oneof"`
}

type ParquetValue_String_ struct {
	String_ *ParquetValue_ParquetString `protobuf:"bytes,13,opt,name=string,proto3,oneof"`
}

type ParquetValue_Binary struct {
	Binary *ParquetValue_ParquetBytes `protobuf:"bytes,14,opt,name=binary,proto3,oneof"`
}

func (*ParquetValue_Bool) isParquetValue_Data() {}

func (*ParquetValue_Int32) isParquetValue_Data() {}

func (*ParquetValue_Int64) isParquetValue_Data() {}

func (*ParquetValue_Uint32) isParquetValue_Data() {}

func (*ParquetValue_Uint64) isParquetValue_Data() {}

func (*ParquetValue_Float) isParquetValue_Data() {}

func (*ParquetValue_Double) isParquetValue_Data() {}

func (*ParquetValue_Json) isParquetValue_Data() {}

func (*ParquetValue_Decimal) isParquetValue_Data() {}

func (*ParquetValue_BigDecimal) isParquetValue_Data() {}

func (*ParquetValue_BigInteger) isParquetValue_Data() {}

func (*ParquetValue_UnixTime) isParquetValue_Data() {}

func (*ParquetValue_String_) isParquetValue_Data() {}

func (*ParquetValue_Binary) isParquetValue_Data() {}

// in the case of homo transfers the developer of pair src-dst can transmit extended types
type Column_OriginalType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// use connector_id to identify connector source which produces original type
	// this is recommended because of the data representation that can differ
	ConnectorId string `protobuf:"bytes,1,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"`
	// custom type name
	TypeName string `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
}

func (x *Column_OriginalType) Reset() {
	*x = Column_OriginalType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column_OriginalType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column_OriginalType) ProtoMessage() {}

func (x *Column_OriginalType) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column_OriginalType.ProtoReflect.Descriptor instead.
func (*Column_OriginalType) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Column_OriginalType) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

func (x *Column_OriginalType) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

type ParquetValue_ParquetBool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []bool `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *ParquetValue_ParquetBool) Reset() {
	*x = ParquetValue_ParquetBool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParquetValue_ParquetBool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetValue_ParquetBool) ProtoMessage() {}

func (x *ParquetValue_ParquetBool) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetValue_ParquetBool.ProtoReflect.Descriptor instead.
func (*ParquetValue_ParquetBool) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{11, 0}
}

func (x *ParquetValue_ParquetBool) GetValues() []bool {
	if x != nil {
		return x.Values
	}
	return nil
}

type ParquetValue_ParquetInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int32 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *ParquetValue_ParquetInt32) Reset() {
	*x = ParquetValue_ParquetInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParquetValue_ParquetInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetValue_ParquetInt32) ProtoMessage() {}

func (x *ParquetValue_ParquetInt32) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetValue_ParquetInt32.ProtoReflect.Descriptor instead.
func (*ParquetValue_ParquetInt32) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{11, 1}
}

func (x *ParquetValue_ParquetInt32) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type ParquetValue_ParquetInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int64 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *ParquetValue_ParquetInt64) Reset() {
	*x = ParquetValue_ParquetInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParquetValue_ParquetInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetValue_ParquetInt64) ProtoMessage() {}

func (x *ParquetValue_ParquetInt64) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetValue_ParquetInt64.ProtoReflect.Descriptor instead.
func (*ParquetValue_ParquetInt64) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{11, 2}
}

func (x *ParquetValue_ParquetInt64) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type ParquetValue_ParquetUInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []uint32 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *ParquetValue_ParquetUInt32) Reset() {
	*x = ParquetValue_ParquetUInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParquetValue_ParquetUInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetValue_ParquetUInt32) ProtoMessage() {}

func (x *ParquetValue_ParquetUInt32) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetValue_ParquetUInt32.ProtoReflect.Descriptor instead.
func (*ParquetValue_ParquetUInt32) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{11, 3}
}

func (x *ParquetValue_ParquetUInt32) GetValues() []uint32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type ParquetValue_ParquetUInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int64 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *ParquetValue_ParquetUInt64) Reset() {
	*x = ParquetValue_ParquetUInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParquetValue_ParquetUInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetValue_ParquetUInt64) ProtoMessage() {}

func (x *ParquetValue_ParquetUInt64) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetValue_ParquetUInt64.ProtoReflect.Descriptor instead.
func (*ParquetValue_ParquetUInt64) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{11, 4}
}

func (x *ParquetValue_ParquetUInt64) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type ParquetValue_ParquetFloat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []float32 `protobuf:"fixed32,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *ParquetValue_ParquetFloat) Reset() {
	*x = ParquetValue_ParquetFloat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParquetValue_ParquetFloat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetValue_ParquetFloat) ProtoMessage() {}

func (x *ParquetValue_ParquetFloat) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetValue_ParquetFloat.ProtoReflect.Descriptor instead.
func (*ParquetValue_ParquetFloat) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{11, 5}
}

func (x *ParquetValue_ParquetFloat) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type ParquetValue_ParquetDouble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []float64 `protobuf:"fixed64,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *ParquetValue_ParquetDouble) Reset() {
	*x = ParquetValue_ParquetDouble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParquetValue_ParquetDouble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetValue_ParquetDouble) ProtoMessage() {}

func (x *ParquetValue_ParquetDouble) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetValue_ParquetDouble.ProtoReflect.Descriptor instead.
func (*ParquetValue_ParquetDouble) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{11, 6}
}

func (x *ParquetValue_ParquetDouble) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type ParquetValue_ParquetString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ParquetValue_ParquetString) Reset() {
	*x = ParquetValue_ParquetString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParquetValue_ParquetString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetValue_ParquetString) ProtoMessage() {}

func (x *ParquetValue_ParquetString) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetValue_ParquetString.ProtoReflect.Descriptor instead.
func (*ParquetValue_ParquetString) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{11, 7}
}

func (x *ParquetValue_ParquetString) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type ParquetValue_ParquetDecimal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*Decimal `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ParquetValue_ParquetDecimal) Reset() {
	*x = ParquetValue_ParquetDecimal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParquetValue_ParquetDecimal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetValue_ParquetDecimal) ProtoMessage() {}

func (x *ParquetValue_ParquetDecimal) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetValue_ParquetDecimal.ProtoReflect.Descriptor instead.
func (*ParquetValue_ParquetDecimal) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{11, 8}
}

func (x *ParquetValue_ParquetDecimal) GetValues() []*Decimal {
	if x != nil {
		return x.Values
	}
	return nil
}

type ParquetValue_ParquetBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values [][]byte `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ParquetValue_ParquetBytes) Reset() {
	*x = ParquetValue_ParquetBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v0_2_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParquetValue_ParquetBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetValue_ParquetBytes) ProtoMessage() {}

func (x *ParquetValue_ParquetBytes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v0_2_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetValue_ParquetBytes.ProtoReflect.Descriptor instead.
func (*ParquetValue_ParquetBytes) Descriptor() ([]byte, []int) {
	return file_api_v0_2_data_proto_rawDescGZIP(), []int{11, 9}
}

func (x *ParquetValue_ParquetBytes) GetValues() [][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_api_v0_2_data_proto protoreflect.FileDescriptor

var file_api_v0_2_data_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x5f, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32,
	0x22, 0x29, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x05,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x30, 0x5f, 0x32, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x55, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x4b, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64,
	0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22,
	0xc5, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x0d, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x4e, 0x0a, 0x0c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x65, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0e, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x65, 0x0a,
	0x10, 0x68, 0x6f, 0x6d, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x30, 0x5f, 0x32, 0x2e, 0x48, 0x6f, 0x6d, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x48, 0x00, 0x52, 0x0e, 0x68, 0x6f, 0x6d, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x22, 0x54, 0x0a, 0x0e, 0x48, 0x6f, 0x6d, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xd2, 0x02, 0x0a, 0x0e, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4a, 0x0a, 0x07,
	0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x30, 0x5f, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x52, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64,
	0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e,
	0x50, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x6f, 0x77, 0x12, 0x4e, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f,
	0x32, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x71, 0x75, 0x65, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x5a,
	0x0a, 0x08, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x6f, 0x77, 0x12, 0x4e, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x69, 0x0a, 0x07, 0x50, 0x61,
	0x72, 0x71, 0x75, 0x65, 0x74, 0x12, 0x5e, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x07, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x22, 0xc0, 0x03, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x16, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x18, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x05, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6a,
	0x73, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0b, 0x62, 0x69, 0x67, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x69, 0x67, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0b, 0x62, 0x69, 0x67, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x62,
	0x69, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x09, 0x75, 0x6e, 0x69,
	0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08,
	0x75, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x18, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x06, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xb2, 0x0e, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x59, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64,
	0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e,
	0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x61, 0x72,
	0x71, 0x75, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c,
	0x12, 0x5c, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x44, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x71,
	0x75, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x5c,
	0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x5f, 0x0a, 0x06,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x5f, 0x0a,
	0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x5c,
	0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x5f, 0x0a, 0x06,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x5b, 0x0a,
	0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x07, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x68,
	0x0a, 0x0b, 0x62, 0x69, 0x67, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64,
	0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e,
	0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x61, 0x72,
	0x71, 0x75, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x69,
	0x67, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x68, 0x0a, 0x0b, 0x62, 0x69, 0x67, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x12, 0x63, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f,
	0x32, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50,
	0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x48, 0x00, 0x52, 0x08, 0x75,
	0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x30, 0x5f, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x5e, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x30, 0x5f, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x1a, 0x25, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x71,
	0x75, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x08, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a,
	0x26, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x26, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x71, 0x75,
	0x65, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a,
	0x27, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x27, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x71,
	0x75, 0x65, 0x74, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x1a, 0x26, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x27, 0x0a, 0x0d, 0x50, 0x61, 0x72,
	0x71, 0x75, 0x65, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x1a, 0x27, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x5c, 0x0a, 0x0e, 0x50,
	0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x4a, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x5f, 0x32, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x26, 0x0a, 0x0c, 0x50, 0x61, 0x72,
	0x71, 0x75, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x5d, 0x0a, 0x06, 0x4f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x2a, 0x80, 0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4c, 0x55, 0x4d,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f,
	0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4c, 0x55,
	0x4d, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4c, 0x55,
	0x4d, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x06, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4c, 0x55, 0x4d,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43,
	0x49, 0x4d, 0x41, 0x4c, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x47, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41,
	0x4c, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x49, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x0b,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x49, 0x58, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e,
	0x47, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x0e, 0x42, 0x27, 0x5a, 0x25, 0x6b,
	0x72, 0x79, 0x31, 0x32, 0x37, 0x2e, 0x72, 0x75, 0x2f, 0x64, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x5f, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v0_2_data_proto_rawDescOnce sync.Once
	file_api_v0_2_data_proto_rawDescData = file_api_v0_2_data_proto_rawDesc
)

func file_api_v0_2_data_proto_rawDescGZIP() []byte {
	file_api_v0_2_data_proto_rawDescOnce.Do(func() {
		file_api_v0_2_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v0_2_data_proto_rawDescData)
	})
	return file_api_v0_2_data_proto_rawDescData
}

var file_api_v0_2_data_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_v0_2_data_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_api_v0_2_data_proto_goTypes = []interface{}{
	(OpType)(0),                         // 0: yandexcloud.datatransfer.dtextension.v0_2.OpType
	(ColumnType)(0),                     // 1: yandexcloud.datatransfer.dtextension.v0_2.ColumnType
	(*Namespace)(nil),                   // 2: yandexcloud.datatransfer.dtextension.v0_2.Namespace
	(*Table)(nil),                       // 3: yandexcloud.datatransfer.dtextension.v0_2.Table
	(*Schema)(nil),                      // 4: yandexcloud.datatransfer.dtextension.v0_2.Schema
	(*Column)(nil),                      // 5: yandexcloud.datatransfer.dtextension.v0_2.Column
	(*ChangeItem)(nil),                  // 6: yandexcloud.datatransfer.dtextension.v0_2.ChangeItem
	(*HomoChangeItem)(nil),              // 7: yandexcloud.datatransfer.dtextension.v0_2.HomoChangeItem
	(*DataChangeItem)(nil),              // 8: yandexcloud.datatransfer.dtextension.v0_2.DataChangeItem
	(*PlainRow)(nil),                    // 9: yandexcloud.datatransfer.dtextension.v0_2.PlainRow
	(*Parquet)(nil),                     // 10: yandexcloud.datatransfer.dtextension.v0_2.Parquet
	(*Decimal)(nil),                     // 11: yandexcloud.datatransfer.dtextension.v0_2.Decimal
	(*ColumnValue)(nil),                 // 12: yandexcloud.datatransfer.dtextension.v0_2.ColumnValue
	(*ParquetValue)(nil),                // 13: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue
	(*Column_OriginalType)(nil),         // 14: yandexcloud.datatransfer.dtextension.v0_2.Column.OriginalType
	(*ParquetValue_ParquetBool)(nil),    // 15: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetBool
	(*ParquetValue_ParquetInt32)(nil),   // 16: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetInt32
	(*ParquetValue_ParquetInt64)(nil),   // 17: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetInt64
	(*ParquetValue_ParquetUInt32)(nil),  // 18: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetUInt32
	(*ParquetValue_ParquetUInt64)(nil),  // 19: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetUInt64
	(*ParquetValue_ParquetFloat)(nil),   // 20: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetFloat
	(*ParquetValue_ParquetDouble)(nil),  // 21: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetDouble
	(*ParquetValue_ParquetString)(nil),  // 22: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetString
	(*ParquetValue_ParquetDecimal)(nil), // 23: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetDecimal
	(*ParquetValue_ParquetBytes)(nil),   // 24: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetBytes
}
var file_api_v0_2_data_proto_depIdxs = []int32{
	2,  // 0: yandexcloud.datatransfer.dtextension.v0_2.Table.namespace:type_name -> yandexcloud.datatransfer.dtextension.v0_2.Namespace
	4,  // 1: yandexcloud.datatransfer.dtextension.v0_2.Table.schema:type_name -> yandexcloud.datatransfer.dtextension.v0_2.Schema
	5,  // 2: yandexcloud.datatransfer.dtextension.v0_2.Schema.columns:type_name -> yandexcloud.datatransfer.dtextension.v0_2.Column
	1,  // 3: yandexcloud.datatransfer.dtextension.v0_2.Column.type:type_name -> yandexcloud.datatransfer.dtextension.v0_2.ColumnType
	14, // 4: yandexcloud.datatransfer.dtextension.v0_2.Column.original_type:type_name -> yandexcloud.datatransfer.dtextension.v0_2.Column.OriginalType
	8,  // 5: yandexcloud.datatransfer.dtextension.v0_2.ChangeItem.data_change_item:type_name -> yandexcloud.datatransfer.dtextension.v0_2.DataChangeItem
	7,  // 6: yandexcloud.datatransfer.dtextension.v0_2.ChangeItem.homo_change_item:type_name -> yandexcloud.datatransfer.dtextension.v0_2.HomoChangeItem
	0,  // 7: yandexcloud.datatransfer.dtextension.v0_2.DataChangeItem.op_type:type_name -> yandexcloud.datatransfer.dtextension.v0_2.OpType
	3,  // 8: yandexcloud.datatransfer.dtextension.v0_2.DataChangeItem.table:type_name -> yandexcloud.datatransfer.dtextension.v0_2.Table
	9,  // 9: yandexcloud.datatransfer.dtextension.v0_2.DataChangeItem.plain_row:type_name -> yandexcloud.datatransfer.dtextension.v0_2.PlainRow
	10, // 10: yandexcloud.datatransfer.dtextension.v0_2.DataChangeItem.parquet:type_name -> yandexcloud.datatransfer.dtextension.v0_2.Parquet
	12, // 11: yandexcloud.datatransfer.dtextension.v0_2.PlainRow.values:type_name -> yandexcloud.datatransfer.dtextension.v0_2.ColumnValue
	13, // 12: yandexcloud.datatransfer.dtextension.v0_2.Parquet.parquet_values:type_name -> yandexcloud.datatransfer.dtextension.v0_2.ParquetValue
	11, // 13: yandexcloud.datatransfer.dtextension.v0_2.ColumnValue.decimal:type_name -> yandexcloud.datatransfer.dtextension.v0_2.Decimal
	15, // 14: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.bool:type_name -> yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetBool
	16, // 15: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.int32:type_name -> yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetInt32
	17, // 16: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.int64:type_name -> yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetInt64
	18, // 17: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.uint32:type_name -> yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetUInt32
	19, // 18: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.uint64:type_name -> yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetUInt64
	20, // 19: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.float:type_name -> yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetFloat
	21, // 20: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.double:type_name -> yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetDouble
	22, // 21: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.json:type_name -> yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetString
	23, // 22: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.decimal:type_name -> yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetDecimal
	22, // 23: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.big_decimal:type_name -> yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetString
	22, // 24: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.big_integer:type_name -> yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetString
	17, // 25: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.unix_time:type_name -> yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetInt64
	22, // 26: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.string:type_name -> yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetString
	24, // 27: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.binary:type_name -> yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetBytes
	11, // 28: yandexcloud.datatransfer.dtextension.v0_2.ParquetValue.ParquetDecimal.values:type_name -> yandexcloud.datatransfer.dtextension.v0_2.Decimal
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_api_v0_2_data_proto_init() }
func file_api_v0_2_data_proto_init() {
	if File_api_v0_2_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v0_2_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Namespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomoChangeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataChangeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlainRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parquet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decimal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParquetValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column_OriginalType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParquetValue_ParquetBool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParquetValue_ParquetInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParquetValue_ParquetInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParquetValue_ParquetUInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParquetValue_ParquetUInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParquetValue_ParquetFloat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParquetValue_ParquetDouble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParquetValue_ParquetString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParquetValue_ParquetDecimal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v0_2_data_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParquetValue_ParquetBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v0_2_data_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_api_v0_2_data_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ChangeItem_DataChangeItem)(nil),
		(*ChangeItem_HomoChangeItem)(nil),
	}
	file_api_v0_2_data_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*DataChangeItem_PlainRow)(nil),
		(*DataChangeItem_Parquet)(nil),
	}
	file_api_v0_2_data_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ColumnValue_Bool)(nil),
		(*ColumnValue_Int32)(nil),
		(*ColumnValue_Int64)(nil),
		(*ColumnValue_Uint32)(nil),
		(*ColumnValue_Uint64)(nil),
		(*ColumnValue_Float)(nil),
		(*ColumnValue_Double)(nil),
		(*ColumnValue_Json)(nil),
		(*ColumnValue_Decimal)(nil),
		(*ColumnValue_BigDecimal)(nil),
		(*ColumnValue_BigInteger)(nil),
		(*ColumnValue_UnixTime)(nil),
		(*ColumnValue_String_)(nil),
		(*ColumnValue_Binary)(nil),
	}
	file_api_v0_2_data_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ParquetValue_Bool)(nil),
		(*ParquetValue_Int32)(nil),
		(*ParquetValue_Int64)(nil),
		(*ParquetValue_Uint32)(nil),
		(*ParquetValue_Uint64)(nil),
		(*ParquetValue_Float)(nil),
		(*ParquetValue_Double)(nil),
		(*ParquetValue_Json)(nil),
		(*ParquetValue_Decimal)(nil),
		(*ParquetValue_BigDecimal)(nil),
		(*ParquetValue_BigInteger)(nil),
		(*ParquetValue_UnixTime)(nil),
		(*ParquetValue_String_)(nil),
		(*ParquetValue_Binary)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v0_2_data_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v0_2_data_proto_goTypes,
		DependencyIndexes: file_api_v0_2_data_proto_depIdxs,
		EnumInfos:         file_api_v0_2_data_proto_enumTypes,
		MessageInfos:      file_api_v0_2_data_proto_msgTypes,
	}.Build()
	File_api_v0_2_data_proto = out.File
	file_api_v0_2_data_proto_rawDesc = nil
	file_api_v0_2_data_proto_goTypes = nil
	file_api_v0_2_data_proto_depIdxs = nil
}
